using System.Collections.Generic;

namespace picdasm
{
    class Pic18Sfr
    {
        private static Dictionary<int, string> bits = new Dictionary<int, string>();
        private static Dictionary<int, string> regs = new Dictionary<int, string>();

        private static void Bit(int at, string name)
        {
            if (!bits.ContainsKey(at))
            {
                bits.Add(at, name);
            }
            else if (bits[at].Length > name.Length)
            {
                bits[at] = name;
            }
        }


        private static void Reg(int at, string name)
        {
            if (!regs.ContainsKey(at))
            {
                regs.Add(at, name);
            }
            else if (regs[at].Length > name.Length)
            {
                regs[at] = name;
            }
        }

        static void Regs()
        {
            Reg(0xF16, "PMD3");
            Reg(0xF17, "PMD2");
            Reg(0xF18, "PMD1");
            Reg(0xF19, "PMD0");
            Reg(0xF1A, "PSTR3CON");
            Reg(0xF1B, "PSTR2CON");
            Reg(0xF1C, "TXREG2");
            Reg(0xF1D, "RCREG2");
            Reg(0xF1E, "SPBRG2");
            Reg(0xF1F, "SPBRGH2");
            Reg(0xF20, "BAUDCON2");
            Reg(0xF21, "TXSTA2");
            Reg(0xF22, "RCSTA2");
            Reg(0xF23, "ANCON2");
            Reg(0xF24, "ANCON1");
            Reg(0xF25, "ANCON0");
            Reg(0xF27, "ODCON3");
            Reg(0xF28, "ODCON2");
            Reg(0xF29, "ODCON1");
            Reg(0xF2A, "REFOCON");
            Reg(0xF2B, "CCPTMRS2");
            Reg(0xF2C, "CCPTMRS1");
            Reg(0xF2D, "CCPTMRS0");
            Reg(0xF2E, "CM3CON");
            Reg(0xF2E, "CM3CON1");
            Reg(0xF2F, "CM2CON");
            Reg(0xF2F, "CM2CON1");
            Reg(0xF30, "T12CON");
            Reg(0xF31, "PR12");
            Reg(0xF32, "TMR12");
            Reg(0xF33, "T10CON");
            Reg(0xF34, "PR10");
            Reg(0xF35, "TMR10");
            Reg(0xF36, "T8CON");
            Reg(0xF37, "PR8");
            Reg(0xF38, "TMR8");
            Reg(0xF39, "T6CON");
            Reg(0xF3A, "PR6");
            Reg(0xF3B, "TMR6");
            Reg(0xF3C, "T7GCON");
            Reg(0xF3D, "T7CON");
            Reg(0xF3E, "TMR7L");
            Reg(0xF3F, "TMR7H");
            Reg(0xF40, "CCP10CON");
            Reg(0xF41, "CCPR10L");
            Reg(0xF42, "CCPR10H");
            Reg(0xF43, "CCP9CON");
            Reg(0xF44, "CCPR9L");
            Reg(0xF45, "CCPR9H");
            Reg(0xF46, "CCP8CON");
            Reg(0xF47, "CCPR8L");
            Reg(0xF48, "CCPR8H");
            Reg(0xF49, "CCP3CON");
            Reg(0xF4A, "CCPR3L");
            Reg(0xF4B, "CCPR3H");
            Reg(0xF4C, "ECCP3DEL");
            Reg(0xF4D, "ECCP3AS");
            Reg(0xF4E, "CCP2CON");
            Reg(0xF4E, "ECCP2CON");
            Reg(0xF4F, "CCPR2L");
            Reg(0xF50, "CCPR2H");
            Reg(0xF51, "ECCP2DEL");
            Reg(0xF51, "PWM2CON");
            Reg(0xF52, "ECCP2AS");
            Reg(0xF53, "PADCFG1");
            Reg(0xF54, "CM1CON");
            Reg(0xF54, "CM1CON1");
            Reg(0xF55, "CTMUICON");
            Reg(0xF56, "CTMUCONL");
            Reg(0xF57, "CTMUCONH");
            Reg(0xF58, "ALRMVALL");
            Reg(0xF59, "ALRMVALH");
            Reg(0xF5A, "ALRMRPT");
            Reg(0xF5B, "ALRMCFG");
            Reg(0xF5C, "RTCVALL");
            Reg(0xF5D, "RTCVALH");
            Reg(0xF5E, "RTCCAL");
            Reg(0xF5F, "RTCCFG");
            Reg(0xF60, "PIE6");
            Reg(0xF61, "EEDATA");
            Reg(0xF62, "EEADR");
            Reg(0xF63, "EEADRH");
            Reg(0xF64, "OSCCON2");
            Reg(0xF65, "BAUDCON1");
            Reg(0xF65, "BAUDCTL");
            Reg(0xF65, "BAUDCON");
            Reg(0xF66, "SSP2CON2");
            Reg(0xF67, "SSP2CON1");
            Reg(0xF68, "SSP2STAT");
            Reg(0xF69, "SSP2ADD");
            Reg(0xF69, "SSP2MSK");
            Reg(0xF6A, "SSP2BUF");
            Reg(0xF6B, "T4CON");
            Reg(0xF6C, "PR4");
            Reg(0xF6D, "TMR4");
            Reg(0xF6E, "CCP7CON");
            Reg(0xF6F, "CCPR7L");
            Reg(0xF70, "CCPR7H");
            Reg(0xF71, "CCP6CON");
            Reg(0xF72, "CCPR6L");
            Reg(0xF73, "CCPR6H");
            Reg(0xF74, "CCP5CON");
            Reg(0xF75, "CCPR5L");
            Reg(0xF76, "CCPR5H");
            Reg(0xF77, "CCP4CON");
            Reg(0xF78, "CCPR4L");
            Reg(0xF79, "CCPR4H");
            Reg(0xF7A, "T5GCON");
            Reg(0xF7B, "T5CON");
            Reg(0xF7C, "TMR5L");
            Reg(0xF7D, "TMR5H");
            Reg(0xF7E, "EECON2");
            Reg(0xF7F, "EECON1");
            Reg(0xF80, "PORTA");
            Reg(0xF81, "PORTB");
            Reg(0xF82, "PORTC");
            Reg(0xF83, "PORTD");
            Reg(0xF84, "PORTE");
            Reg(0xF85, "PORTF");
            Reg(0xF86, "PORTG");
            Reg(0xF89, "LATA");
            Reg(0xF8A, "LATB");
            Reg(0xF8B, "LATC");
            Reg(0xF8C, "LATD");
            Reg(0xF8D, "LATE");
            Reg(0xF8E, "LATF");
            Reg(0xF8F, "LATG");
            Reg(0xF92, "TRISA");
            Reg(0xF93, "TRISB");
            Reg(0xF94, "TRISC");
            Reg(0xF95, "TRISD");
            Reg(0xF96, "TRISE");
            Reg(0xF97, "TRISF");
            Reg(0xF98, "TRISG");
            Reg(0xF9B, "OSCTUNE");
            Reg(0xF9C, "PSTR1CON");
            Reg(0xF9D, "PIE1");
            Reg(0xF9E, "PIR1");
            Reg(0xF9F, "IPR1");
            Reg(0xFA0, "PIE2");
            Reg(0xFA1, "PIR2");
            Reg(0xFA2, "IPR2");
            Reg(0xFA3, "PIE3");
            Reg(0xFA4, "PIR3");
            Reg(0xFA5, "IPR3");
            Reg(0xFA6, "PIR6");
            Reg(0xFA7, "PSPCON");
            Reg(0xFA8, "HLVDCON");
            Reg(0xFA9, "IPR6");
            Reg(0xFAA, "T1GCON");
            Reg(0xFAB, "RCSTA1");
            Reg(0xFAB, "RCSTA");
            Reg(0xFAC, "TXSTA1");
            Reg(0xFAC, "TXSTA");
            Reg(0xFAD, "TXREG1");
            Reg(0xFAD, "TXREG");
            Reg(0xFAE, "RCREG1");
            Reg(0xFAE, "RCREG");
            Reg(0xFAF, "SPBRG1");
            Reg(0xFAF, "SPBRG");
            Reg(0xFB0, "T3GCON");
            Reg(0xFB1, "T3CON");
            Reg(0xFB2, "TMR3L");
            Reg(0xFB3, "TMR3H");
            Reg(0xFB4, "CMSTAT");
            Reg(0xFB4, "CMSTATUS");
            Reg(0xFB5, "CVRCON");
            Reg(0xFB6, "PIE4");
            Reg(0xFB7, "PIR4");
            Reg(0xFB8, "IPR4");
            Reg(0xFB9, "PIE5");
            Reg(0xFBA, "PIR5");
            Reg(0xFBB, "CCP1CON");
            Reg(0xFBB, "ECCP1CON");
            Reg(0xFBC, "CCPR1L");
            Reg(0xFBD, "CCPR1H");
            Reg(0xFBE, "ECCP1DEL");
            Reg(0xFBE, "PWM1CON");
            Reg(0xFBF, "ECCP1AS");
            Reg(0xFC0, "ADCON2");
            Reg(0xFC1, "ADCON1");
            Reg(0xFC2, "ADCON0");
            Reg(0xFC3, "ADRESL");
            Reg(0xFC4, "ADRESH");
            Reg(0xFC5, "SSP1CON2");
            Reg(0xFC5, "SSPCON2");
            Reg(0xFC6, "SSP1CON1");
            Reg(0xFC6, "SSPCON1");
            Reg(0xFC7, "SSP1STAT");
            Reg(0xFC7, "SSPSTAT");
            Reg(0xFC8, "SSP1ADD");
            Reg(0xFC8, "SSPADD");
            Reg(0xFC8, "SSP1MSK");
            Reg(0xFC9, "SSP1BUF");
            Reg(0xFC9, "SSPBUF");
            Reg(0xFCA, "T2CON");
            Reg(0xFCB, "PR2");
            Reg(0xFCB, "MEMCON");
            Reg(0xFCC, "TMR2");
            Reg(0xFCD, "T1CON");
            Reg(0xFCE, "TMR1L");
            Reg(0xFCF, "TMR1H");
            Reg(0xFD0, "RCON");
            Reg(0xFD1, "WDTCON");
            Reg(0xFD2, "IPR5");
            Reg(0xFD3, "OSCCON");
            Reg(0xFD4, "SPBRGH1");
            Reg(0xFD5, "T0CON");
            Reg(0xFD6, "TMR0L");
            Reg(0xFD7, "TMR0H");
            Reg(0xFD8, "STATUS");
            Reg(0xFD9, "FSR2L");
            Reg(0xFDA, "FSR2H");
            Reg(0xFDB, "PLUSW2");
            Reg(0xFDC, "PREINC2");
            Reg(0xFDD, "POSTDEC2");
            Reg(0xFDE, "POSTINC2");
            Reg(0xFDF, "INDF2");
            Reg(0xFE0, "BSR");
            Reg(0xFE1, "FSR1L");
            Reg(0xFE2, "FSR1H");
            Reg(0xFE3, "PLUSW1");
            Reg(0xFE4, "PREINC1");
            Reg(0xFE5, "POSTDEC1");
            Reg(0xFE6, "POSTINC1");
            Reg(0xFE7, "INDF1");
            Reg(0xFE8, "WREG");
            Reg(0xFE9, "FSR0L");
            Reg(0xFEA, "FSR0H");
            Reg(0xFEB, "PLUSW0");
            Reg(0xFEC, "PREINC0");
            Reg(0xFED, "POSTDEC0");
            Reg(0xFEE, "POSTINC0");
            Reg(0xFEF, "INDF0");
            Reg(0xFF0, "INTCON3");
            Reg(0xFF1, "INTCON2");
            Reg(0xFF2, "INTCON");
            Reg(0xFF3, "PRODL");
            Reg(0xFF4, "PRODH");
            Reg(0xFF5, "TABLAT");
            Reg(0xFF6, "TBLPTRL");
            Reg(0xFF7, "TBLPTRH");
            Reg(0xFF8, "TBLPTRU");
            Reg(0xFF9, "PCL");
            Reg(0xFFA, "PCLATH");
            Reg(0xFFB, "PCLATU");
            Reg(0xFFC, "STKPTR");
            Reg(0xFFD, "TOSL");
            Reg(0xFFE, "TOSH");
            Reg(0xFFF, "TOSU");

        }

        static void Bits()
        {
            Bit((0xF65 * 8 + 0), "ABDEN1");
            Bit((0xF20 * 8 + 0), "ABDEN2");
            Bit((0xF65 * 8 + 7), "ABDOVF1");
            Bit((0xF20 * 8 + 7), "ABDOVF2");
            Bit((0xFC5 * 8 + 5), "ACKDT1");
            Bit((0xF66 * 8 + 5), "ACKDT2");
            Bit((0xFC5 * 8 + 4), "ACKEN1");
            Bit((0xF66 * 8 + 4), "ACKEN2");
            Bit((0xFC5 * 8 + 6), "ACKSTAT1");
            Bit((0xF66 * 8 + 6), "ACKSTAT2");
            Bit((0xFC0 * 8 + 3), "ACQT0");
            Bit((0xFC0 * 8 + 4), "ACQT1");
            Bit((0xFC0 * 8 + 5), "ACQT2");
            Bit((0xF83 * 8 + 0), "AD0");
            Bit((0xF83 * 8 + 1), "AD1");
            Bit((0xF84 * 8 + 2), "AD10");
            Bit((0xF84 * 8 + 3), "AD11");
            Bit((0xF84 * 8 + 4), "AD12");
            Bit((0xF84 * 8 + 5), "AD13");
            Bit((0xF84 * 8 + 6), "AD14");
            Bit((0xF84 * 8 + 7), "AD15");
            Bit((0xF83 * 8 + 2), "AD2");
            Bit((0xF83 * 8 + 3), "AD3");
            Bit((0xF83 * 8 + 4), "AD4");
            Bit((0xF83 * 8 + 5), "AD5");
            Bit((0xF83 * 8 + 6), "AD6");
            Bit((0xF83 * 8 + 7), "AD7");
            Bit((0xF84 * 8 + 0), "AD8");
            Bit((0xF84 * 8 + 1), "AD9");
            Bit((0xF19 * 8 + 0), "ADCMD");
            Bit((0xFC0 * 8 + 0), "ADCS0");
            Bit((0xFC0 * 8 + 1), "ADCS1");
            Bit((0xFC0 * 8 + 2), "ADCS2");
            Bit((0xFAB * 8 + 3), "ADDEN1");
            Bit((0xF22 * 8 + 3), "ADDEN2");
            Bit((0xFAB * 8 + 3), "ADEN");
            Bit((0xFC0 * 8 + 7), "ADFM");
            Bit((0xF9D * 8 + 6), "ADIE");
            Bit((0xF9E * 8 + 6), "ADIF");
            Bit((0xF9F * 8 + 6), "ADIP");
            Bit((0xFC5 * 8 + 1), "ADMSK11");
            Bit((0xF66 * 8 + 1), "ADMSK12");
            Bit((0xFC5 * 8 + 2), "ADMSK21");
            Bit((0xF66 * 8 + 2), "ADMSK22");
            Bit((0xFC5 * 8 + 3), "ADMSK31");
            Bit((0xF66 * 8 + 3), "ADMSK32");
            Bit((0xFC5 * 8 + 4), "ADMSK41");
            Bit((0xF66 * 8 + 4), "ADMSK42");
            Bit((0xFC5 * 8 + 5), "ADMSK51");
            Bit((0xF66 * 8 + 5), "ADMSK52");
            Bit((0xFC2 * 8 + 0), "ADON");
            Bit((0xF5B * 8 + 7), "ALRMEN");
            Bit((0xF5B * 8 + 0), "ALRMPTR0");
            Bit((0xF5B * 8 + 1), "ALRMPTR1");
            Bit((0xF5B * 8 + 2), "AMASK0");
            Bit((0xF5B * 8 + 3), "AMASK1");
            Bit((0xF5B * 8 + 4), "AMASK2");
            Bit((0xF5B * 8 + 5), "AMASK3");
            Bit((0xF80 * 8 + 0), "AN0");
            Bit((0xF80 * 8 + 1), "AN1");
            Bit((0xF85 * 8 + 5), "AN10");
            Bit((0xF85 * 8 + 6), "AN11");
            Bit((0xF86 * 8 + 4), "AN16");
            Bit((0xF86 * 8 + 3), "AN17");
            Bit((0xF86 * 8 + 2), "AN18");
            Bit((0xF86 * 8 + 1), "AN19");
            Bit((0xF80 * 8 + 2), "AN2");
            Bit((0xF80 * 8 + 3), "AN3");
            Bit((0xF80 * 8 + 5), "AN4");
            Bit((0xF85 * 8 + 7), "AN5");
            Bit((0xF85 * 8 + 1), "AN6");
            Bit((0xF85 * 8 + 2), "AN7");
            Bit((0xF85 * 8 + 3), "AN8");
            Bit((0xF85 * 8 + 4), "AN9");
            Bit((0xF25 * 8 + 0), "ANSEL0");
            Bit((0xF25 * 8 + 1), "ANSEL1");
            Bit((0xF24 * 8 + 2), "ANSEL10");
            Bit((0xF24 * 8 + 3), "ANSEL11");
            Bit((0xF23 * 8 + 0), "ANSEL16");
            Bit((0xF23 * 8 + 1), "ANSEL17");
            Bit((0xF23 * 8 + 2), "ANSEL18");
            Bit((0xF23 * 8 + 3), "ANSEL19");
            Bit((0xF25 * 8 + 2), "ANSEL2");
            Bit((0xF25 * 8 + 3), "ANSEL3");
            Bit((0xF25 * 8 + 4), "ANSEL4");
            Bit((0xF25 * 8 + 5), "ANSEL5");
            Bit((0xF25 * 8 + 6), "ANSEL6");
            Bit((0xF25 * 8 + 7), "ANSEL7");
            Bit((0xF24 * 8 + 0), "ANSEL8");
            Bit((0xF24 * 8 + 1), "ANSEL9");
            Bit((0xF5A * 8 + 0), "ARPT0");
            Bit((0xF5A * 8 + 1), "ARPT1");
            Bit((0xF5A * 8 + 2), "ARPT2");
            Bit((0xF5A * 8 + 3), "ARPT3");
            Bit((0xF5A * 8 + 4), "ARPT4");
            Bit((0xF5A * 8 + 5), "ARPT5");
            Bit((0xF5A * 8 + 6), "ARPT6");
            Bit((0xF5A * 8 + 7), "ARPT7");
            Bit((0xFA0 * 8 + 3), "BCL1IE");
            Bit((0xFA1 * 8 + 3), "BCL1IF");
            Bit((0xFA2 * 8 + 3), "BCL1IP");
            Bit((0xFA0 * 8 + 4), "BCL2IE");
            Bit((0xFA1 * 8 + 4), "BCL2IF");
            Bit((0xFA2 * 8 + 4), "BCL2IP");
            Bit((0xFA0 * 8 + 3), "BCLIE");
            Bit((0xFA1 * 8 + 3), "BCLIF");
            Bit((0xFA2 * 8 + 3), "BCLIP");
            Bit((0xFC7 * 8 + 0), "BF1");
            Bit((0xF68 * 8 + 0), "BF2");
            Bit((0xFA8 * 8 + 6), "BGVST");
            Bit((0xFD0 * 8 + 0), "BOR");
            Bit((0xF65 * 8 + 3), "BRG161");
            Bit((0xF20 * 8 + 3), "BRG162");
            Bit((0xFAC * 8 + 2), "BRGH1");
            Bit((0xF21 * 8 + 2), "BRGH2");
            Bit((0xF2B * 8 + 4), "C10TSEL0");
            Bit((0xF54 * 8 + 0), "C1CH0");
            Bit((0xF54 * 8 + 1), "C1CH1");
            Bit((0xF85 * 8 + 6), "C1INA");
            Bit((0xF85 * 8 + 5), "C1INB");
            Bit((0xF85 * 8 + 2), "C1OUT");
            Bit((0xF85 * 8 + 2), "C1OUTF");
            Bit((0xF2D * 8 + 0), "C1TSEL0");
            Bit((0xF2D * 8 + 1), "C1TSEL1");
            Bit((0xF2D * 8 + 2), "C1TSEL2");
            Bit((0xF85 * 8 + 4), "C2INA");
            Bit((0xF85 * 8 + 3), "C2INB");
            Bit((0xF85 * 8 + 1), "C2OUT");
            Bit((0xF85 * 8 + 1), "C2OUTF");
            Bit((0xF2D * 8 + 3), "C2TSEL0");
            Bit((0xF2D * 8 + 4), "C2TSEL1");
            Bit((0xF2D * 8 + 5), "C2TSEL2");
            Bit((0xF86 * 8 + 2), "C3INA");
            Bit((0xF86 * 8 + 3), "C3INB");
            Bit((0xF86 * 8 + 4), "C3INC");
            Bit((0xF86 * 8 + 1), "C3OUT");
            Bit((0xF86 * 8 + 1), "C3OUTG");
            Bit((0xF2D * 8 + 6), "C3TSEL0");
            Bit((0xF2D * 8 + 7), "C3TSEL1");
            Bit((0xF2C * 8 + 0), "C4TSEL0");
            Bit((0xF2C * 8 + 1), "C4TSEL1");
            Bit((0xF2C * 8 + 2), "C5TSEL0");
            Bit((0xF2C * 8 + 4), "C6TSEL0");
            Bit((0xF2C * 8 + 6), "C7TSEL0");
            Bit((0xF2C * 8 + 7), "C7TSEL1");
            Bit((0xF2B * 8 + 0), "C8TSEL0");
            Bit((0xF2B * 8 + 1), "C8TSEL1");
            Bit((0xF2B * 8 + 2), "C9TSEL0");
            Bit((0xF5E * 8 + 0), "CAL0");
            Bit((0xF3E * 8 + 0), "CAL07");
            Bit((0xF5E * 8 + 1), "CAL1");
            Bit((0xF3E * 8 + 1), "CAL17");
            Bit((0xF5E * 8 + 2), "CAL2");
            Bit((0xF3E * 8 + 2), "CAL27");
            Bit((0xF5E * 8 + 3), "CAL3");
            Bit((0xF3E * 8 + 3), "CAL37");
            Bit((0xF5E * 8 + 4), "CAL4");
            Bit((0xF3E * 8 + 4), "CAL47");
            Bit((0xF5E * 8 + 5), "CAL5");
            Bit((0xF3E * 8 + 5), "CAL57");
            Bit((0xF5E * 8 + 6), "CAL6");
            Bit((0xF3E * 8 + 6), "CAL67");
            Bit((0xF5E * 8 + 7), "CAL7");
            Bit((0xF3E * 8 + 7), "CAL77");
            Bit((0xFD8 * 8 + 0), "CARRY");
            Bit((0xF54 * 8 + 0), "CCH01");
            Bit((0xF2F * 8 + 0), "CCH02");
            Bit((0xF2E * 8 + 0), "CCH03");
            Bit((0xFD2 * 8 + 0), "CCH05");
            Bit((0xF54 * 8 + 1), "CCH11");
            Bit((0xF2F * 8 + 1), "CCH12");
            Bit((0xF2E * 8 + 1), "CCH13");
            Bit((0xFD2 * 8 + 1), "CCH15");
            Bit((0xFB8 * 8 + 0), "CCIP3IP");
            Bit((0xF82 * 8 + 2), "CCP1");
            Bit((0xF84 * 8 + 2), "CCP10");
            Bit((0xFB6 * 8 + 7), "CCP10IE");
            Bit((0xFB7 * 8 + 7), "CCP10IF");
            Bit((0xFB8 * 8 + 7), "CCP10IP");
            Bit((0xF40 * 8 + 0), "CCP10M0");
            Bit((0xF40 * 8 + 1), "CCP10M1");
            Bit((0xF40 * 8 + 2), "CCP10M2");
            Bit((0xF40 * 8 + 3), "CCP10M3");
            Bit((0xF16 * 8 + 7), "CCP10MD");
            Bit((0xF28 * 8 + 7), "CCP10OD");
            Bit((0xF40 * 8 + 5), "CCP10X");
            Bit((0xF40 * 8 + 4), "CCP10Y");
            Bit((0xFA3 * 8 + 1), "CCP1IE");
            Bit((0xFA4 * 8 + 1), "CCP1IF");
            Bit((0xFA5 * 8 + 1), "CCP1IP");
            Bit((0xFBB * 8 + 0), "CCP1M0");
            Bit((0xFBB * 8 + 1), "CCP1M1");
            Bit((0xFBB * 8 + 2), "CCP1M2");
            Bit((0xFBB * 8 + 3), "CCP1M3");
            Bit((0xF19 * 8 + 5), "CCP1MD");
            Bit((0xF29 * 8 + 5), "CCP1OD");
            Bit((0xFBB * 8 + 5), "CCP1X");
            Bit((0xFBB * 8 + 4), "CCP1Y");
            Bit((0xF84 * 8 + 7), "CCP2E");
            Bit((0xFA3 * 8 + 2), "CCP2IE");
            Bit((0xFA4 * 8 + 2), "CCP2IF");
            Bit((0xFA5 * 8 + 2), "CCP2IP");
            Bit((0xF4E * 8 + 0), "CCP2M0");
            Bit((0xF4E * 8 + 1), "CCP2M1");
            Bit((0xF4E * 8 + 2), "CCP2M2");
            Bit((0xF4E * 8 + 3), "CCP2M3");
            Bit((0xF19 * 8 + 6), "CCP2MD");
            Bit((0xF29 * 8 + 6), "CCP2OD");
            Bit((0xF4E * 8 + 5), "CCP2X");
            Bit((0xF4E * 8 + 4), "CCP2Y");
            Bit((0xF81 * 8 + 3), "CCP2_P2A");
            Bit((0xF81 * 8 + 3), "CCP2_PA2");
            Bit((0xF86 * 8 + 0), "CCP3");
            Bit((0xFB6 * 8 + 0), "CCP3IE");
            Bit((0xFB7 * 8 + 0), "CCP3IF");
            Bit((0xFB8 * 8 + 0), "CCP3IP");
            Bit((0xF49 * 8 + 0), "CCP3M0");
            Bit((0xF49 * 8 + 1), "CCP3M1");
            Bit((0xF49 * 8 + 2), "CCP3M2");
            Bit((0xF49 * 8 + 3), "CCP3M3");
            Bit((0xF19 * 8 + 7), "CCP3MD");
            Bit((0xF28 * 8 + 0), "CCP3OD");
            Bit((0xF86 * 8 + 3), "CCP4");
            Bit((0xFB6 * 8 + 1), "CCP4IE");
            Bit((0xFB7 * 8 + 1), "CCP4IF");
            Bit((0xFB8 * 8 + 1), "CCP4IP");
            Bit((0xF77 * 8 + 0), "CCP4M0");
            Bit((0xF77 * 8 + 1), "CCP4M1");
            Bit((0xF77 * 8 + 2), "CCP4M2");
            Bit((0xF77 * 8 + 3), "CCP4M3");
            Bit((0xF16 * 8 + 1), "CCP4MD");
            Bit((0xF28 * 8 + 1), "CCP4OD");
            Bit((0xF77 * 8 + 5), "CCP4X");
            Bit((0xF77 * 8 + 4), "CCP4Y");
            Bit((0xF86 * 8 + 4), "CCP5");
            Bit((0xFB6 * 8 + 2), "CCP5IE");
            Bit((0xFB7 * 8 + 2), "CCP5IF");
            Bit((0xFB8 * 8 + 2), "CCP5IP");
            Bit((0xF74 * 8 + 0), "CCP5M0");
            Bit((0xF74 * 8 + 1), "CCP5M1");
            Bit((0xF74 * 8 + 2), "CCP5M2");
            Bit((0xF74 * 8 + 3), "CCP5M3");
            Bit((0xF16 * 8 + 2), "CCP5MD");
            Bit((0xF28 * 8 + 2), "CCP5OD");
            Bit((0xF74 * 8 + 5), "CCP5X");
            Bit((0xF74 * 8 + 4), "CCP5Y");
            Bit((0xF84 * 8 + 6), "CCP6");
            Bit((0xF84 * 8 + 6), "CCP6E");
            Bit((0xFB6 * 8 + 3), "CCP6IE");
            Bit((0xFB7 * 8 + 3), "CCP6IF");
            Bit((0xFB8 * 8 + 3), "CCP6IP");
            Bit((0xF71 * 8 + 0), "CCP6M0");
            Bit((0xF71 * 8 + 1), "CCP6M1");
            Bit((0xF71 * 8 + 2), "CCP6M2");
            Bit((0xF71 * 8 + 3), "CCP6M3");
            Bit((0xF16 * 8 + 3), "CCP6MD");
            Bit((0xF28 * 8 + 3), "CCP6OD");
            Bit((0xF71 * 8 + 5), "CCP6X");
            Bit((0xF71 * 8 + 4), "CCP6Y");
            Bit((0xF84 * 8 + 5), "CCP7");
            Bit((0xF84 * 8 + 5), "CCP7E");
            Bit((0xFB6 * 8 + 4), "CCP7IE");
            Bit((0xFB7 * 8 + 4), "CCP7IF");
            Bit((0xFB8 * 8 + 4), "CCP7IP");
            Bit((0xF6E * 8 + 0), "CCP7M0");
            Bit((0xF6E * 8 + 1), "CCP7M1");
            Bit((0xF6E * 8 + 2), "CCP7M2");
            Bit((0xF6E * 8 + 3), "CCP7M3");
            Bit((0xF16 * 8 + 4), "CCP7MD");
            Bit((0xF28 * 8 + 4), "CCP7OD");
            Bit((0xF6E * 8 + 5), "CCP7X");
            Bit((0xF6E * 8 + 4), "CCP7Y");
            Bit((0xF84 * 8 + 4), "CCP8");
            Bit((0xF84 * 8 + 4), "CCP8E");
            Bit((0xFB6 * 8 + 5), "CCP8IE");
            Bit((0xFB7 * 8 + 5), "CCP8IF");
            Bit((0xFB8 * 8 + 5), "CCP8IP");
            Bit((0xF46 * 8 + 0), "CCP8M0");
            Bit((0xF46 * 8 + 1), "CCP8M1");
            Bit((0xF46 * 8 + 2), "CCP8M2");
            Bit((0xF46 * 8 + 3), "CCP8M3");
            Bit((0xF16 * 8 + 5), "CCP8MD");
            Bit((0xF28 * 8 + 5), "CCP8OD");
            Bit((0xF46 * 8 + 5), "CCP8X");
            Bit((0xF46 * 8 + 4), "CCP8Y");
            Bit((0xF84 * 8 + 3), "CCP9");
            Bit((0xF84 * 8 + 3), "CCP9E");
            Bit((0xFB6 * 8 + 6), "CCP9IE");
            Bit((0xFB7 * 8 + 6), "CCP9IF");
            Bit((0xFB8 * 8 + 6), "CCP9IP");
            Bit((0xF43 * 8 + 0), "CCP9M0");
            Bit((0xF43 * 8 + 1), "CCP9M1");
            Bit((0xF43 * 8 + 2), "CCP9M2");
            Bit((0xF43 * 8 + 3), "CCP9M3");
            Bit((0xF16 * 8 + 6), "CCP9MD");
            Bit((0xF28 * 8 + 6), "CCP9OD");
            Bit((0xF43 * 8 + 5), "CCP9X");
            Bit((0xF43 * 8 + 4), "CCP9Y");
            Bit((0xF7F * 8 + 6), "CFGS");
            Bit((0xF5B * 8 + 6), "CHIME");
            Bit((0xFC2 * 8 + 2), "CHS0");
            Bit((0xFC2 * 8 + 3), "CHS1");
            Bit((0xFC2 * 8 + 4), "CHS2");
            Bit((0xFC2 * 8 + 5), "CHS3");
            Bit((0xFC2 * 8 + 6), "CHS4");
            Bit((0xFC1 * 8 + 0), "CHSN0");
            Bit((0xFC1 * 8 + 1), "CHSN1");
            Bit((0xFC1 * 8 + 2), "CHSN2");
            Bit((0xFC1 * 8 + 3), "CHSN3");
            Bit((0xF82 * 8 + 6), "CK1");
            Bit((0xF86 * 8 + 1), "CK2");
            Bit((0xFC7 * 8 + 6), "CKE1");
            Bit((0xF68 * 8 + 6), "CKE2");
            Bit((0xFC6 * 8 + 4), "CKP1");
            Bit((0xF67 * 8 + 4), "CKP2");
            Bit((0xF65 * 8 + 4), "CKTXP");
            Bit((0xF80 * 8 + 7), "CLKI");
            Bit((0xF80 * 8 + 6), "CLKO");
            Bit((0xFD0 * 8 + 5), "CM");
            Bit((0xF60 * 8 + 0), "CMP1IE");
            Bit((0xFA6 * 8 + 0), "CMP1IF");
            Bit((0xFA9 * 8 + 0), "CMP1IP");
            Bit((0xF17 * 8 + 0), "CMP1MD");
            Bit((0xFB4 * 8 + 5), "CMP1OUT");
            Bit((0xF60 * 8 + 1), "CMP2IE");
            Bit((0xFA6 * 8 + 1), "CMP2IF");
            Bit((0xFA9 * 8 + 1), "CMP2IP");
            Bit((0xF17 * 8 + 1), "CMP2MD");
            Bit((0xFB4 * 8 + 6), "CMP2OUT");
            Bit((0xF60 * 8 + 2), "CMP3IE");
            Bit((0xFA6 * 8 + 2), "CMP3IF");
            Bit((0xFA9 * 8 + 2), "CMP3IP");
            Bit((0xF17 * 8 + 2), "CMP3MD");
            Bit((0xFB4 * 8 + 7), "CMP3OUT");
            Bit((0xF1B * 8 + 6), "CMPL02");
            Bit((0xF1A * 8 + 6), "CMPL03");
            Bit((0xF1B * 8 + 7), "CMPL12");
            Bit((0xF1A * 8 + 7), "CMPL13");
            Bit((0xF54 * 8 + 6), "COE1");
            Bit((0xF2F * 8 + 6), "COE2");
            Bit((0xF2E * 8 + 6), "COE3");
            Bit((0xF54 * 8 + 7), "CON1");
            Bit((0xF2F * 8 + 7), "CON2");
            Bit((0xF2E * 8 + 7), "CON3");
            Bit((0xF54 * 8 + 5), "CPOL1");
            Bit((0xF2F * 8 + 5), "CPOL2");
            Bit((0xF2E * 8 + 5), "CPOL3");
            Bit((0xF54 * 8 + 2), "CREF1");
            Bit((0xF2F * 8 + 2), "CREF2");
            Bit((0xF2E * 8 + 2), "CREF3");
            Bit((0xFAB * 8 + 4), "CREN1");
            Bit((0xF22 * 8 + 4), "CREN2");
            Bit((0xF84 * 8 + 2), "CS");
            Bit((0xFAC * 8 + 7), "CSRC1");
            Bit((0xF21 * 8 + 7), "CSRC2");
            Bit((0xF85 * 8 + 1), "CTDIN");
            Bit((0xF81 * 8 + 2), "CTED1");
            Bit((0xF81 * 8 + 3), "CTED2");
            Bit((0xF27 * 8 + 0), "CTMUDS");
            Bit((0xF57 * 8 + 7), "CTMUEN");
            Bit((0xF85 * 8 + 3), "CTMUI");
            Bit((0xFA3 * 8 + 3), "CTMUIE");
            Bit((0xFA4 * 8 + 3), "CTMUIF");
            Bit((0xFA5 * 8 + 3), "CTMUIP");
            Bit((0xF18 * 8 + 6), "CTMUMD");
            Bit((0xF57 * 8 + 5), "CTMUSIDL");
            Bit((0xF83 * 8 + 0), "CTPLS");
            Bit((0xF57 * 8 + 0), "CTTRIG");
            Bit((0xFB5 * 8 + 0), "CVR0");
            Bit((0xFB5 * 8 + 1), "CVR1");
            Bit((0xFB5 * 8 + 2), "CVR2");
            Bit((0xFB5 * 8 + 3), "CVR3");
            Bit((0xFB5 * 8 + 4), "CVR4");
            Bit((0xF85 * 8 + 5), "CVREF");
            Bit((0xFB5 * 8 + 7), "CVREN");
            Bit((0xFB5 * 8 + 6), "CVROE");
            Bit((0xFB5 * 8 + 6), "CVROEN");
            Bit((0xFB5 * 8 + 5), "CVRR");
            Bit((0xFB5 * 8 + 5), "CVRSS");
            Bit((0xFC7 * 8 + 5), "DA");
            Bit((0xFC7 * 8 + 5), "DA1");
            Bit((0xF68 * 8 + 5), "DA2");
            Bit((0xF68 * 8 + 5), "DATA_ADDRESS2");
            Bit((0xFD8 * 8 + 1), "DC");
            Bit((0xF40 * 8 + 4), "DC10B0");
            Bit((0xF40 * 8 + 5), "DC10B1");
            Bit((0xFBB * 8 + 4), "DC1B0");
            Bit((0xFBB * 8 + 5), "DC1B1");
            Bit((0xF4E * 8 + 4), "DC2B0");
            Bit((0xF4E * 8 + 5), "DC2B1");
            Bit((0xF49 * 8 + 4), "DC3B0");
            Bit((0xF49 * 8 + 5), "DC3B1");
            Bit((0xF77 * 8 + 4), "DC4B0");
            Bit((0xF77 * 8 + 5), "DC4B1");
            Bit((0xF74 * 8 + 4), "DC5B0");
            Bit((0xF74 * 8 + 5), "DC5B1");
            Bit((0xF71 * 8 + 4), "DC6B0");
            Bit((0xF71 * 8 + 5), "DC6B1");
            Bit((0xF6E * 8 + 4), "DC7B0");
            Bit((0xF6E * 8 + 5), "DC7B1");
            Bit((0xF46 * 8 + 4), "DC8B0");
            Bit((0xF46 * 8 + 5), "DC8B1");
            Bit((0xF43 * 8 + 4), "DC9B0");
            Bit((0xF43 * 8 + 5), "DC9B1");
            Bit((0xFC2 * 8 + 1), "DONE");
            Bit((0xF82 * 8 + 7), "DT1");
            Bit((0xF86 * 8 + 2), "DT2");
            Bit((0xF65 * 8 + 5), "DTRXP");
            Bit((0xF65 * 8 + 5), "DTRXP1");
            Bit((0xF20 * 8 + 5), "DTRXP2");
            Bit((0xF68 * 8 + 5), "D_A2");
            Bit((0xF68 * 8 + 5), "D_NOT_A2");
            Bit((0xF68 * 8 + 5), "D_nA2");
            Bit((0xFCB * 8 + 7), "EBDIS");
            Bit((0xFBF * 8 + 4), "ECCP1AS0");
            Bit((0xFBF * 8 + 5), "ECCP1AS1");
            Bit((0xFBF * 8 + 6), "ECCP1AS2");
            Bit((0xFBF * 8 + 7), "ECCP1ASE");
            Bit((0xF52 * 8 + 4), "ECCP2AS0");
            Bit((0xF52 * 8 + 5), "ECCP2AS1");
            Bit((0xF52 * 8 + 6), "ECCP2AS2");
            Bit((0xF52 * 8 + 7), "ECCP2ASE");
            Bit((0xF4D * 8 + 4), "ECCP3AS0");
            Bit((0xF4D * 8 + 5), "ECCP3AS1");
            Bit((0xF4D * 8 + 6), "ECCP3AS2");
            Bit((0xF4D * 8 + 7), "ECCP3ASE");
            Bit((0xF56 * 8 + 4), "EDG1POL");
            Bit((0xF56 * 8 + 2), "EDG1SEL0");
            Bit((0xF56 * 8 + 3), "EDG1SEL1");
            Bit((0xF56 * 8 + 0), "EDG1STAT");
            Bit((0xF56 * 8 + 7), "EDG2POL");
            Bit((0xF56 * 8 + 5), "EDG2SEL0");
            Bit((0xF56 * 8 + 6), "EDG2SEL1");
            Bit((0xF56 * 8 + 1), "EDG2STAT");
            Bit((0xF57 * 8 + 3), "EDGEN");
            Bit((0xF57 * 8 + 2), "EDGSEQEN");
            Bit((0xF7F * 8 + 6), "EEFS");
            Bit((0xF60 * 8 + 4), "EEIE");
            Bit((0xFA6 * 8 + 4), "EEIF");
            Bit((0xFA9 * 8 + 4), "EEIP");
            Bit((0xF7F * 8 + 7), "EEPGD");
            Bit((0xF18 * 8 + 0), "EMBMD");
            Bit((0xF54 * 8 + 3), "EVPOL01");
            Bit((0xF2F * 8 + 3), "EVPOL02");
            Bit((0xF2E * 8 + 3), "EVPOL03");
            Bit((0xFD2 * 8 + 3), "EVPOL05");
            Bit((0xF54 * 8 + 4), "EVPOL11");
            Bit((0xF2F * 8 + 4), "EVPOL12");
            Bit((0xF2E * 8 + 4), "EVPOL13");
            Bit((0xFD2 * 8 + 4), "EVPOL15");
            Bit((0xFAB * 8 + 2), "FERR1");
            Bit((0xF22 * 8 + 2), "FERR2");
            Bit((0xF81 * 8 + 0), "FLT0");
            Bit((0xF7F * 8 + 4), "FREE");
            Bit((0xFC5 * 8 + 7), "GCEN1");
            Bit((0xF66 * 8 + 7), "GCEN2");
            Bit((0xFF2 * 8 + 7), "GIE");
            Bit((0xFF2 * 8 + 7), "GIEH");
            Bit((0xFF2 * 8 + 6), "GIEL");
            Bit((0xFF2 * 8 + 7), "GIE_GIEH");
            Bit((0xFC2 * 8 + 1), "GO");
            Bit((0xFC2 * 8 + 1), "GODONE");
            Bit((0xFC2 * 8 + 1), "GO_DONE");
            Bit((0xFC2 * 8 + 1), "GO_NOT_DONE");
            Bit((0xFC2 * 8 + 1), "GO_nDONE");
            Bit((0xF5F * 8 + 3), "HALFSEC");
            Bit((0xFD3 * 8 + 2), "HFIOFS");
            Bit((0xFA8 * 8 + 4), "HLVDEN");
            Bit((0xFA0 * 8 + 2), "HLVDIE");
            Bit((0xFA1 * 8 + 2), "HLVDIF");
            Bit((0xF80 * 8 + 5), "HLVDIN");
            Bit((0xFA2 * 8 + 2), "HLVDIP");
            Bit((0xFA8 * 8 + 0), "HLVDL0");
            Bit((0xFA8 * 8 + 1), "HLVDL1");
            Bit((0xFA8 * 8 + 2), "HLVDL2");
            Bit((0xFA8 * 8 + 3), "HLVDL3");
            Bit((0xF68 * 8 + 5), "I2C_DAT2");
            Bit((0xF68 * 8 + 2), "I2C_READ2");
            Bit((0xF68 * 8 + 3), "I2C_START2");
            Bit((0xF68 * 8 + 4), "I2C_STOP2");
            Bit((0xFA7 * 8 + 7), "IBF");
            Bit((0xFA7 * 8 + 5), "IBOV");
            Bit((0xF57 * 8 + 1), "IDISSEN");
            Bit((0xFD3 * 8 + 7), "IDLEN");
            Bit((0xF81 * 8 + 0), "INT0");
            Bit((0xFF2 * 8 + 4), "INT0E");
            Bit((0xFF2 * 8 + 1), "INT0F");
            Bit((0xFF2 * 8 + 4), "INT0IE");
            Bit((0xFF2 * 8 + 1), "INT0IF");
            Bit((0xF81 * 8 + 1), "INT1");
            Bit((0xFF0 * 8 + 3), "INT1E");
            Bit((0xFF0 * 8 + 0), "INT1F");
            Bit((0xFF0 * 8 + 3), "INT1IE");
            Bit((0xFF0 * 8 + 0), "INT1IF");
            Bit((0xFF0 * 8 + 6), "INT1IP");
            Bit((0xFF0 * 8 + 6), "INT1P");
            Bit((0xF81 * 8 + 2), "INT2");
            Bit((0xFF0 * 8 + 4), "INT2E");
            Bit((0xFF0 * 8 + 1), "INT2F");
            Bit((0xFF0 * 8 + 4), "INT2IE");
            Bit((0xFF0 * 8 + 1), "INT2IF");
            Bit((0xFF0 * 8 + 7), "INT2IP");
            Bit((0xFF0 * 8 + 7), "INT2P");
            Bit((0xF81 * 8 + 3), "INT3");
            Bit((0xFF0 * 8 + 5), "INT3E");
            Bit((0xFF0 * 8 + 2), "INT3F");
            Bit((0xFF0 * 8 + 5), "INT3IE");
            Bit((0xFF0 * 8 + 2), "INT3IF");
            Bit((0xFF1 * 8 + 1), "INT3IP");
            Bit((0xFF1 * 8 + 1), "INT3P");
            Bit((0xFF1 * 8 + 6), "INTEDG0");
            Bit((0xFF1 * 8 + 5), "INTEDG1");
            Bit((0xFF1 * 8 + 4), "INTEDG2");
            Bit((0xFF1 * 8 + 3), "INTEDG3");
            Bit((0xF9B * 8 + 7), "INTSRC");
            Bit((0xFD0 * 8 + 7), "IPEN");
            Bit((0xFD3 * 8 + 4), "IRCF0");
            Bit((0xFD3 * 8 + 5), "IRCF1");
            Bit((0xFD3 * 8 + 6), "IRCF2");
            Bit((0xF55 * 8 + 0), "IRNG0");
            Bit((0xF55 * 8 + 1), "IRNG1");
            Bit((0xFA8 * 8 + 5), "IRVST");
            Bit((0xF55 * 8 + 2), "ITRIM0");
            Bit((0xF55 * 8 + 3), "ITRIM1");
            Bit((0xF55 * 8 + 4), "ITRIM2");
            Bit((0xF55 * 8 + 5), "ITRIM3");
            Bit((0xF55 * 8 + 6), "ITRIM4");
            Bit((0xF55 * 8 + 7), "ITRIM5");
            Bit((0xF81 * 8 + 4), "KBI0");
            Bit((0xF81 * 8 + 5), "KBI1");
            Bit((0xF81 * 8 + 6), "KBI2");
            Bit((0xF81 * 8 + 7), "KBI3");
            Bit((0xF89 * 8 + 0), "LA0");
            Bit((0xF89 * 8 + 1), "LA1");
            Bit((0xF89 * 8 + 2), "LA2");
            Bit((0xF89 * 8 + 3), "LA3");
            Bit((0xF89 * 8 + 4), "LA4");
            Bit((0xF89 * 8 + 5), "LA5");
            Bit((0xF89 * 8 + 6), "LA6");
            Bit((0xF89 * 8 + 7), "LA7");
            Bit((0xF89 * 8 + 0), "LATA0");
            Bit((0xF89 * 8 + 1), "LATA1");
            Bit((0xF89 * 8 + 2), "LATA2");
            Bit((0xF89 * 8 + 3), "LATA3");
            Bit((0xF89 * 8 + 4), "LATA4");
            Bit((0xF89 * 8 + 5), "LATA5");
            Bit((0xF89 * 8 + 6), "LATA6");
            Bit((0xF89 * 8 + 7), "LATA7");
            Bit((0xF8A * 8 + 0), "LATB0");
            Bit((0xF8A * 8 + 1), "LATB1");
            Bit((0xF8A * 8 + 2), "LATB2");
            Bit((0xF8A * 8 + 3), "LATB3");
            Bit((0xF8A * 8 + 4), "LATB4");
            Bit((0xF8A * 8 + 5), "LATB5");
            Bit((0xF8A * 8 + 6), "LATB6");
            Bit((0xF8A * 8 + 7), "LATB7");
            Bit((0xF8B * 8 + 0), "LATC0");
            Bit((0xF8B * 8 + 1), "LATC1");
            Bit((0xF8B * 8 + 2), "LATC2");
            Bit((0xF8B * 8 + 3), "LATC3");
            Bit((0xF8B * 8 + 4), "LATC4");
            Bit((0xF8B * 8 + 5), "LATC5");
            Bit((0xF8B * 8 + 6), "LATC6");
            Bit((0xF8B * 8 + 7), "LATC7");
            Bit((0xF8C * 8 + 0), "LATD0");
            Bit((0xF8C * 8 + 1), "LATD1");
            Bit((0xF8C * 8 + 2), "LATD2");
            Bit((0xF8C * 8 + 3), "LATD3");
            Bit((0xF8C * 8 + 4), "LATD4");
            Bit((0xF8C * 8 + 5), "LATD5");
            Bit((0xF8C * 8 + 6), "LATD6");
            Bit((0xF8C * 8 + 7), "LATD7");
            Bit((0xF8D * 8 + 0), "LATE0");
            Bit((0xF8D * 8 + 1), "LATE1");
            Bit((0xF8D * 8 + 2), "LATE2");
            Bit((0xF8D * 8 + 3), "LATE3");
            Bit((0xF8D * 8 + 4), "LATE4");
            Bit((0xF8D * 8 + 5), "LATE5");
            Bit((0xF8D * 8 + 6), "LATE6");
            Bit((0xF8D * 8 + 7), "LATE7");
            Bit((0xF8E * 8 + 1), "LATF1");
            Bit((0xF8E * 8 + 2), "LATF2");
            Bit((0xF8E * 8 + 3), "LATF3");
            Bit((0xF8E * 8 + 4), "LATF4");
            Bit((0xF8E * 8 + 5), "LATF5");
            Bit((0xF8E * 8 + 6), "LATF6");
            Bit((0xF8E * 8 + 7), "LATF7");
            Bit((0xF8F * 8 + 0), "LATG0");
            Bit((0xF8F * 8 + 1), "LATG1");
            Bit((0xF8F * 8 + 2), "LATG2");
            Bit((0xF8F * 8 + 3), "LATG3");
            Bit((0xF8F * 8 + 4), "LATG4");
            Bit((0xF8A * 8 + 0), "LB0");
            Bit((0xF8A * 8 + 1), "LB1");
            Bit((0xF8A * 8 + 2), "LB2");
            Bit((0xF8A * 8 + 3), "LB3");
            Bit((0xF8A * 8 + 4), "LB4");
            Bit((0xF8A * 8 + 5), "LB5");
            Bit((0xF8A * 8 + 6), "LB6");
            Bit((0xF8A * 8 + 7), "LB7");
            Bit((0xF8B * 8 + 0), "LC0");
            Bit((0xF8B * 8 + 1), "LC1");
            Bit((0xF8B * 8 + 2), "LC2");
            Bit((0xF8B * 8 + 3), "LC3");
            Bit((0xF8B * 8 + 4), "LC4");
            Bit((0xF8B * 8 + 5), "LC5");
            Bit((0xF8B * 8 + 6), "LC6");
            Bit((0xF8B * 8 + 7), "LC7");
            Bit((0xF8C * 8 + 0), "LD0");
            Bit((0xF8C * 8 + 1), "LD1");
            Bit((0xF8C * 8 + 2), "LD2");
            Bit((0xF8C * 8 + 3), "LD3");
            Bit((0xF8C * 8 + 4), "LD4");
            Bit((0xF8C * 8 + 5), "LD5");
            Bit((0xF8C * 8 + 6), "LD6");
            Bit((0xF8C * 8 + 7), "LD7");
            Bit((0xF8D * 8 + 0), "LE0");
            Bit((0xF8D * 8 + 1), "LE1");
            Bit((0xF8D * 8 + 2), "LE2");
            Bit((0xF8D * 8 + 3), "LE3");
            Bit((0xF8D * 8 + 4), "LE4");
            Bit((0xF8D * 8 + 5), "LE5");
            Bit((0xF8D * 8 + 6), "LE6");
            Bit((0xF8D * 8 + 7), "LE7");
            Bit((0xF8E * 8 + 1), "LF1");
            Bit((0xF8E * 8 + 2), "LF2");
            Bit((0xF8E * 8 + 3), "LF3");
            Bit((0xF8E * 8 + 4), "LF4");
            Bit((0xF8E * 8 + 5), "LF5");
            Bit((0xF8E * 8 + 6), "LF6");
            Bit((0xF8E * 8 + 7), "LF7");
            Bit((0xF8F * 8 + 0), "LG0");
            Bit((0xF8F * 8 + 1), "LG1");
            Bit((0xF8F * 8 + 2), "LG2");
            Bit((0xF8F * 8 + 3), "LG3");
            Bit((0xF8F * 8 + 4), "LG4");
            Bit((0xFA0 * 8 + 2), "LVDIE");
            Bit((0xFA1 * 8 + 2), "LVDIF");
            Bit((0xF80 * 8 + 5), "LVDIN");
            Bit((0xFA2 * 8 + 2), "LVDIP");
            Bit((0xF64 * 8 + 1), "MFIOFS");
            Bit((0xF64 * 8 + 0), "MFIOSEL");
            Bit((0xFC8 * 8 + 0), "MSK01");
            Bit((0xF69 * 8 + 0), "MSK02");
            Bit((0xFC8 * 8 + 1), "MSK11");
            Bit((0xF69 * 8 + 1), "MSK12");
            Bit((0xFC8 * 8 + 2), "MSK21");
            Bit((0xF69 * 8 + 2), "MSK22");
            Bit((0xFC8 * 8 + 3), "MSK31");
            Bit((0xF69 * 8 + 3), "MSK32");
            Bit((0xFC8 * 8 + 4), "MSK41");
            Bit((0xF69 * 8 + 4), "MSK42");
            Bit((0xFC8 * 8 + 5), "MSK51");
            Bit((0xF69 * 8 + 5), "MSK52");
            Bit((0xFC8 * 8 + 6), "MSK61");
            Bit((0xF69 * 8 + 6), "MSK62");
            Bit((0xFC8 * 8 + 7), "MSK71");
            Bit((0xF69 * 8 + 7), "MSK72");
            Bit((0xFD8 * 8 + 4), "NEGATIVE");
            Bit((0xFC7 * 8 + 5), "NOT_A");
            Bit((0xF68 * 8 + 5), "NOT_A2");
            Bit((0xF68 * 8 + 5), "NOT_ADDRESS2");
            Bit((0xFD0 * 8 + 0), "NOT_BOR");
            Bit((0xFD0 * 8 + 5), "NOT_CM");
            Bit((0xF84 * 8 + 2), "NOT_CS");
            Bit((0xFC2 * 8 + 1), "NOT_DONE");
            Bit((0xFD0 * 8 + 2), "NOT_PD");
            Bit((0xFD0 * 8 + 1), "NOT_POR");
            Bit((0xFF1 * 8 + 7), "NOT_RBPU");
            Bit((0xFAB * 8 + 6), "NOT_RC8");
            Bit((0xF84 * 8 + 0), "NOT_RD");
            Bit((0xFD0 * 8 + 4), "NOT_RI");
            Bit((0xF83 * 8 + 7), "NOT_SS2");
            Bit((0xFAA * 8 + 3), "NOT_T1DONE");
            Bit((0xFCD * 8 + 2), "NOT_T1SYNC");
            Bit((0xFB0 * 8 + 3), "NOT_T3DONE");
            Bit((0xFB1 * 8 + 2), "NOT_T3SYNC");
            Bit((0xF7A * 8 + 3), "NOT_T5DONE");
            Bit((0xF7B * 8 + 2), "NOT_T5SYNC");
            Bit((0xF3C * 8 + 3), "NOT_T7DONE");
            Bit((0xF3D * 8 + 2), "NOT_T7SYNC");
            Bit((0xFD0 * 8 + 3), "NOT_TO");
            Bit((0xFAC * 8 + 6), "NOT_TX8");
            Bit((0xFC7 * 8 + 2), "NOT_W");
            Bit((0xF68 * 8 + 2), "NOT_W2");
            Bit((0xF84 * 8 + 1), "NOT_WR");
            Bit((0xF68 * 8 + 2), "NOT_WRITE2");
            Bit((0xFA7 * 8 + 6), "OBF");
            Bit((0xFAB * 8 + 1), "OERR1");
            Bit((0xF22 * 8 + 1), "OERR2");
            Bit((0xF80 * 8 + 7), "OSC1");
            Bit((0xF80 * 8 + 6), "OSC2");
            Bit((0xFA0 * 8 + 7), "OSCFIE");
            Bit((0xFA1 * 8 + 7), "OSCFIF");
            Bit((0xFA2 * 8 + 7), "OSCFIP");
            Bit((0xFD3 * 8 + 3), "OSTS");
            Bit((0xFD8 * 8 + 3), "OV");
            Bit((0xFD8 * 8 + 3), "OVERFLOW");
            Bit((0xF82 * 8 + 2), "P1A");
            Bit((0xF84 * 8 + 6), "P1B");
            Bit((0xF84 * 8 + 5), "P1C");
            Bit((0xFBE * 8 + 0), "P1DC0");
            Bit((0xFBE * 8 + 1), "P1DC1");
            Bit((0xFBE * 8 + 2), "P1DC2");
            Bit((0xFBE * 8 + 3), "P1DC3");
            Bit((0xFBE * 8 + 4), "P1DC4");
            Bit((0xFBE * 8 + 5), "P1DC5");
            Bit((0xFBE * 8 + 6), "P1DC6");
            Bit((0xFBB * 8 + 6), "P1M0");
            Bit((0xFBB * 8 + 7), "P1M1");
            Bit((0xFBE * 8 + 7), "P1RSEN");
            Bit((0xF68 * 8 + 4), "P2");
            Bit((0xF84 * 8 + 2), "P2B");
            Bit((0xF84 * 8 + 1), "P2C");
            Bit((0xF84 * 8 + 0), "P2D");
            Bit((0xF51 * 8 + 0), "P2DC0");
            Bit((0xF1B * 8 + 0), "P2DC02");
            Bit((0xF1B * 8 + 0), "P2DC0CON");
            Bit((0xF51 * 8 + 1), "P2DC1");
            Bit((0xF1B * 8 + 1), "P2DC12");
            Bit((0xF1B * 8 + 1), "P2DC1CON");
            Bit((0xF51 * 8 + 2), "P2DC2");
            Bit((0xF1B * 8 + 2), "P2DC22");
            Bit((0xF1B * 8 + 2), "P2DC2CON");
            Bit((0xF51 * 8 + 3), "P2DC3");
            Bit((0xF1B * 8 + 3), "P2DC32");
            Bit((0xF1B * 8 + 3), "P2DC3CON");
            Bit((0xF51 * 8 + 4), "P2DC4");
            Bit((0xF1B * 8 + 4), "P2DC42");
            Bit((0xF1B * 8 + 4), "P2DC4CON");
            Bit((0xF51 * 8 + 5), "P2DC5");
            Bit((0xF51 * 8 + 6), "P2DC6");
            Bit((0xF1B * 8 + 6), "P2DC62");
            Bit((0xF1B * 8 + 6), "P2DC6CON");
            Bit((0xF4E * 8 + 6), "P2M0");
            Bit((0xF4E * 8 + 7), "P2M1");
            Bit((0xF51 * 8 + 7), "P2RSEN");
            Bit((0xF84 * 8 + 4), "P3B");
            Bit((0xF84 * 8 + 3), "P3C");
            Bit((0xF4C * 8 + 0), "P3DC0");
            Bit((0xF4C * 8 + 1), "P3DC1");
            Bit((0xF4C * 8 + 2), "P3DC2");
            Bit((0xF4C * 8 + 3), "P3DC3");
            Bit((0xF4C * 8 + 4), "P3DC4");
            Bit((0xF4C * 8 + 5), "P3DC5");
            Bit((0xF4C * 8 + 6), "P3DC6");
            Bit((0xF49 * 8 + 6), "P3M0");
            Bit((0xF49 * 8 + 7), "P3M1");
            Bit((0xF4C * 8 + 7), "P3RSEN");
            Bit((0xF82 * 8 + 2), "PA1");
            Bit((0xF82 * 8 + 1), "PA2");
            Bit((0xF84 * 8 + 7), "PA2E");
            Bit((0xF86 * 8 + 0), "PA3");
            Bit((0xF84 * 8 + 6), "PB1E");
            Bit((0xF84 * 8 + 2), "PB2");
            Bit((0xF84 * 8 + 4), "PB3E");
            Bit((0xF84 * 8 + 5), "PC1E");
            Bit((0xF84 * 8 + 1), "PC2");
            Bit((0xF84 * 8 + 3), "PC3E");
            Bit((0xF25 * 8 + 0), "PCFG0");
            Bit((0xF25 * 8 + 1), "PCFG1");
            Bit((0xF24 * 8 + 2), "PCFG10");
            Bit((0xF24 * 8 + 3), "PCFG11");
            Bit((0xF23 * 8 + 0), "PCFG16");
            Bit((0xF23 * 8 + 1), "PCFG17");
            Bit((0xF23 * 8 + 2), "PCFG18");
            Bit((0xF23 * 8 + 3), "PCFG19");
            Bit((0xF25 * 8 + 2), "PCFG2");
            Bit((0xF25 * 8 + 3), "PCFG3");
            Bit((0xF25 * 8 + 4), "PCFG4");
            Bit((0xF25 * 8 + 5), "PCFG5");
            Bit((0xF25 * 8 + 6), "PCFG6");
            Bit((0xF25 * 8 + 7), "PCFG7");
            Bit((0xF24 * 8 + 0), "PCFG8");
            Bit((0xF24 * 8 + 1), "PCFG9");
            Bit((0xFD0 * 8 + 2), "PD");
            Bit((0xF86 * 8 + 4), "PD1");
            Bit((0xF84 * 8 + 0), "PD2");
            Bit((0xF86 * 8 + 3), "PD3");
            Bit((0xFF2 * 8 + 6), "PEIE");
            Bit((0xFF2 * 8 + 6), "PEIE_GIEL");
            Bit((0xFC5 * 8 + 2), "PEN1");
            Bit((0xF66 * 8 + 2), "PEN2");
            Bit((0xF81 * 8 + 6), "PGC");
            Bit((0xF81 * 8 + 7), "PGD");
            Bit((0xF81 * 8 + 5), "PGM");
            Bit((0xF9B * 8 + 6), "PLLEN");
            Bit((0xFD0 * 8 + 1), "POR");
            Bit((0xFD5 * 8 + 3), "PSA");
            Bit((0xF83 * 8 + 0), "PSP0");
            Bit((0xF83 * 8 + 1), "PSP1");
            Bit((0xF83 * 8 + 2), "PSP2");
            Bit((0xF83 * 8 + 3), "PSP3");
            Bit((0xF83 * 8 + 4), "PSP4");
            Bit((0xF83 * 8 + 5), "PSP5");
            Bit((0xF83 * 8 + 6), "PSP6");
            Bit((0xF83 * 8 + 7), "PSP7");
            Bit((0xF9D * 8 + 7), "PSPIE");
            Bit((0xF9E * 8 + 7), "PSPIF");
            Bit((0xF9F * 8 + 7), "PSPIP");
            Bit((0xF18 * 8 + 7), "PSPMD");
            Bit((0xFA7 * 8 + 4), "PSPMODE");
            Bit((0xFBF * 8 + 2), "PSS1AC0");
            Bit((0xFBF * 8 + 3), "PSS1AC1");
            Bit((0xFBF * 8 + 0), "PSS1BD0");
            Bit((0xFBF * 8 + 1), "PSS1BD1");
            Bit((0xF52 * 8 + 2), "PSS2AC0");
            Bit((0xF52 * 8 + 3), "PSS2AC1");
            Bit((0xF52 * 8 + 0), "PSS2BD0");
            Bit((0xF52 * 8 + 1), "PSS2BD1");
            Bit((0xF4D * 8 + 2), "PSS3AC0");
            Bit((0xF4D * 8 + 3), "PSS3AC1");
            Bit((0xF4D * 8 + 0), "PSS3BD0");
            Bit((0xF4D * 8 + 1), "PSS3BD1");
            Bit((0xF80 * 8 + 0), "RA0");
            Bit((0xF80 * 8 + 1), "RA1");
            Bit((0xF80 * 8 + 2), "RA2");
            Bit((0xF80 * 8 + 3), "RA3");
            Bit((0xF80 * 8 + 4), "RA4");
            Bit((0xF80 * 8 + 5), "RA5");
            Bit((0xF80 * 8 + 6), "RA6");
            Bit((0xF80 * 8 + 7), "RA7");
            Bit((0xF81 * 8 + 0), "RB0");
            Bit((0xF81 * 8 + 1), "RB1");
            Bit((0xF81 * 8 + 2), "RB2");
            Bit((0xF81 * 8 + 3), "RB3");
            Bit((0xF81 * 8 + 4), "RB4");
            Bit((0xF81 * 8 + 5), "RB5");
            Bit((0xF81 * 8 + 6), "RB6");
            Bit((0xF81 * 8 + 7), "RB7");
            Bit((0xFF2 * 8 + 3), "RBIE");
            Bit((0xFF2 * 8 + 0), "RBIF");
            Bit((0xFF1 * 8 + 0), "RBIP");
            Bit((0xFF1 * 8 + 7), "RBPU");
            Bit((0xF82 * 8 + 0), "RC0");
            Bit((0xF82 * 8 + 1), "RC1");
            Bit((0xF9D * 8 + 5), "RC1IE");
            Bit((0xF9E * 8 + 5), "RC1IF");
            Bit((0xF9F * 8 + 5), "RC1IP");
            Bit((0xF82 * 8 + 2), "RC2");
            Bit((0xFA3 * 8 + 5), "RC2IE");
            Bit((0xFA4 * 8 + 5), "RC2IF");
            Bit((0xFA5 * 8 + 5), "RC2IP");
            Bit((0xF82 * 8 + 3), "RC3");
            Bit((0xF82 * 8 + 4), "RC4");
            Bit((0xF82 * 8 + 5), "RC5");
            Bit((0xF82 * 8 + 6), "RC6");
            Bit((0xF82 * 8 + 7), "RC7");
            Bit((0xFAB * 8 + 6), "RC8_9");
            Bit((0xF22 * 8 + 6), "RC8_92");
            Bit((0xFAB * 8 + 6), "RC9");
            Bit((0xF22 * 8 + 6), "RC92");
            Bit((0xFAB * 8 + 0), "RCD8");
            Bit((0xF22 * 8 + 0), "RCD82");
            Bit((0xFC5 * 8 + 3), "RCEN1");
            Bit((0xF66 * 8 + 3), "RCEN2");
            Bit((0xF65 * 8 + 6), "RCIDL1");
            Bit((0xF20 * 8 + 6), "RCIDL2");
            Bit((0xF9D * 8 + 5), "RCIE");
            Bit((0xF9E * 8 + 5), "RCIF");
            Bit((0xF9F * 8 + 5), "RCIP");
            Bit((0xF65 * 8 + 6), "RCMT");
            Bit((0xF65 * 8 + 6), "RCMT1");
            Bit((0xF20 * 8 + 6), "RCMT2");
            Bit((0xF7F * 8 + 0), "RD");
            Bit((0xF83 * 8 + 0), "RD0");
            Bit((0xF83 * 8 + 1), "RD1");
            Bit((0xFB1 * 8 + 7), "RD163");
            Bit((0xF7B * 8 + 1), "RD165");
            Bit((0xF3D * 8 + 1), "RD167");
            Bit((0xF83 * 8 + 2), "RD2");
            Bit((0xF83 * 8 + 3), "RD3");
            Bit((0xF83 * 8 + 4), "RD4");
            Bit((0xF83 * 8 + 5), "RD5");
            Bit((0xF83 * 8 + 6), "RD6");
            Bit((0xF83 * 8 + 7), "RD7");
            Bit((0xF84 * 8 + 0), "RDE");
            Bit((0xF53 * 8 + 7), "RDPU");
            Bit((0xF84 * 8 + 0), "RE0");
            Bit((0xF84 * 8 + 1), "RE1");
            Bit((0xF84 * 8 + 2), "RE2");
            Bit((0xF84 * 8 + 3), "RE3");
            Bit((0xF84 * 8 + 4), "RE4");
            Bit((0xF84 * 8 + 5), "RE5");
            Bit((0xF84 * 8 + 6), "RE6");
            Bit((0xF84 * 8 + 7), "RE7");
            Bit((0xF68 * 8 + 2), "READ_WRITE2");
            Bit((0xF84 * 8 + 3), "REFO");
            Bit((0xFD1 * 8 + 7), "REGSLP");
            Bit((0xF53 * 8 + 6), "REPU");
            Bit((0xF85 * 8 + 1), "RF1");
            Bit((0xF85 * 8 + 2), "RF2");
            Bit((0xF85 * 8 + 3), "RF3");
            Bit((0xF85 * 8 + 4), "RF4");
            Bit((0xF85 * 8 + 5), "RF5");
            Bit((0xF85 * 8 + 6), "RF6");
            Bit((0xF85 * 8 + 7), "RF7");
            Bit((0xF86 * 8 + 0), "RG0");
            Bit((0xF86 * 8 + 1), "RG1");
            Bit((0xF86 * 8 + 2), "RG2");
            Bit((0xF86 * 8 + 3), "RG3");
            Bit((0xF86 * 8 + 4), "RG4");
            Bit((0xF86 * 8 + 5), "RG5");
            Bit((0xFD0 * 8 + 4), "RI");
            Bit((0xF2A * 8 + 0), "RODIV0");
            Bit((0xF2A * 8 + 1), "RODIV1");
            Bit((0xF2A * 8 + 2), "RODIV2");
            Bit((0xF2A * 8 + 3), "RODIV3");
            Bit((0xF2A * 8 + 7), "ROON");
            Bit((0xF2A * 8 + 4), "ROSEL");
            Bit((0xF2A * 8 + 5), "ROSSLP");
            Bit((0xFC5 * 8 + 1), "RSEN1");
            Bit((0xF66 * 8 + 1), "RSEN2");
            Bit((0xF86 * 8 + 4), "RTCC");
            Bit((0xFA3 * 8 + 0), "RTCCIE");
            Bit((0xFA4 * 8 + 0), "RTCCIF");
            Bit((0xFA5 * 8 + 0), "RTCCIP");
            Bit((0xF18 * 8 + 5), "RTCCMD");
            Bit((0xF5F * 8 + 7), "RTCEN");
            Bit((0xF5F * 8 + 2), "RTCOE");
            Bit((0xF5F * 8 + 0), "RTCPTR0");
            Bit((0xF5F * 8 + 1), "RTCPTR1");
            Bit((0xF5F * 8 + 4), "RTCSYNC");
            Bit((0xF5F * 8 + 5), "RTCWREN");
            Bit((0xF53 * 8 + 1), "RTSECSEL0");
            Bit((0xF53 * 8 + 2), "RTSECSEL1");
            Bit((0xFC7 * 8 + 2), "RW");
            Bit((0xFC7 * 8 + 2), "RW1");
            Bit((0xF68 * 8 + 2), "RW2");
            Bit((0xF82 * 8 + 7), "RX1");
            Bit((0xF86 * 8 + 2), "RX2");
            Bit((0xFAB * 8 + 6), "RX91");
            Bit((0xF22 * 8 + 6), "RX92");
            Bit((0xFAB * 8 + 0), "RX9D1");
            Bit((0xF22 * 8 + 0), "RX9D2");
            Bit((0xFA3 * 8 + 0), "RXB0IE");
            Bit((0xFA3 * 8 + 1), "RXB1IE");
            Bit((0xFA3 * 8 + 1), "RXBNIE");
            Bit((0xFA4 * 8 + 1), "RXBNIF");
            Bit((0xFA5 * 8 + 1), "RXBNIP");
            Bit((0xF65 * 8 + 5), "RXCKP");
            Bit((0xF65 * 8 + 5), "RXDTP1");
            Bit((0xF20 * 8 + 5), "RXDTP2");
            Bit((0xF68 * 8 + 2), "R_NOT_W2");
            Bit((0xF68 * 8 + 2), "R_W2");
            Bit((0xF68 * 8 + 2), "R_nW2");
            Bit((0xF68 * 8 + 3), "S2");
            Bit((0xFD0 * 8 + 6), "SBOREN");
            Bit((0xF82 * 8 + 3), "SCK1");
            Bit((0xF83 * 8 + 6), "SCK2");
            Bit((0xF82 * 8 + 0), "SCKLI");
            Bit((0xF65 * 8 + 4), "SCKP");
            Bit((0xF65 * 8 + 4), "SCKP1");
            Bit((0xF20 * 8 + 4), "SCKP2");
            Bit((0xF82 * 8 + 3), "SCL1");
            Bit((0xF83 * 8 + 6), "SCL2");
            Bit((0xFD3 * 8 + 0), "SCS0");
            Bit((0xFD3 * 8 + 1), "SCS1");
            Bit((0xF82 * 8 + 4), "SDA1");
            Bit((0xF83 * 8 + 5), "SDA2");
            Bit((0xF82 * 8 + 4), "SDI1");
            Bit((0xF83 * 8 + 5), "SDI2");
            Bit((0xF82 * 8 + 5), "SDO1");
            Bit((0xF83 * 8 + 4), "SDO2");
            Bit((0xFC5 * 8 + 0), "SEN1");
            Bit((0xF66 * 8 + 0), "SEN2");
            Bit((0xFAC * 8 + 3), "SENDB1");
            Bit((0xF21 * 8 + 3), "SENDB2");
            Bit((0xFC7 * 8 + 7), "SMP1");
            Bit((0xF68 * 8 + 7), "SMP2");
            Bit((0xFB1 * 8 + 3), "SOSCEN3");
            Bit((0xF7B * 8 + 3), "SOSCEN5");
            Bit((0xF3D * 8 + 3), "SOSCEN7");
            Bit((0xF64 * 8 + 3), "SOSCGO");
            Bit((0xF82 * 8 + 1), "SOSCI");
            Bit((0xF82 * 8 + 0), "SOSCO");
            Bit((0xF64 * 8 + 6), "SOSCRUN");
            Bit((0xFFC * 8 + 0), "SP0");
            Bit((0xFFC * 8 + 1), "SP1");
            Bit((0xFFC * 8 + 2), "SP2");
            Bit((0xFFC * 8 + 3), "SP3");
            Bit((0xFFC * 8 + 4), "SP4");
            Bit((0xFAB * 8 + 7), "SPEN1");
            Bit((0xF22 * 8 + 7), "SPEN2");
            Bit((0xF19 * 8 + 1), "SPI1MD");
            Bit((0xF29 * 8 + 7), "SPI1OD");
            Bit((0xF19 * 8 + 2), "SPI2MD");
            Bit((0xF29 * 8 + 0), "SPI2OD");
            Bit((0xFAB * 8 + 5), "SREN1");
            Bit((0xF22 * 8 + 5), "SREN2");
            Bit((0xFAB * 8 + 5), "SRENA");
            Bit((0xFD1 * 8 + 4), "SRETEN");
            Bit((0xF85 * 8 + 7), "SS1");
            Bit((0xF83 * 8 + 7), "SS2");
            Bit((0xF9D * 8 + 3), "SSP1IE");
            Bit((0xF9E * 8 + 3), "SSP1IF");
            Bit((0xF9F * 8 + 3), "SSP1IP");
            Bit((0xF19 * 8 + 1), "SSP1MD");
            Bit((0xFA0 * 8 + 5), "SSP2IE");
            Bit((0xFA1 * 8 + 5), "SSP2IF");
            Bit((0xFA2 * 8 + 5), "SSP2IP");
            Bit((0xF19 * 8 + 2), "SSP2MD");
            Bit((0xFC6 * 8 + 5), "SSPEN1");
            Bit((0xF67 * 8 + 5), "SSPEN2");
            Bit((0xF9D * 8 + 3), "SSPIE");
            Bit((0xF9E * 8 + 3), "SSPIF");
            Bit((0xF9F * 8 + 3), "SSPIP");
            Bit((0xFC6 * 8 + 0), "SSPM01");
            Bit((0xF67 * 8 + 0), "SSPM02");
            Bit((0xFC6 * 8 + 1), "SSPM11");
            Bit((0xF67 * 8 + 1), "SSPM12");
            Bit((0xFC6 * 8 + 2), "SSPM21");
            Bit((0xF67 * 8 + 2), "SSPM22");
            Bit((0xFC6 * 8 + 3), "SSPM31");
            Bit((0xF67 * 8 + 3), "SSPM32");
            Bit((0xFC6 * 8 + 6), "SSPOV1");
            Bit((0xF67 * 8 + 6), "SSPOV2");
            Bit((0xFC7 * 8 + 3), "START");
            Bit((0xFC7 * 8 + 3), "START1");
            Bit((0xF68 * 8 + 3), "START2");
            Bit((0xFFC * 8 + 7), "STKFUL");
            Bit((0xFFC * 8 + 7), "STKOVF");
            Bit((0xFFC * 8 + 6), "STKUNF");
            Bit((0xFC7 * 8 + 4), "STOP");
            Bit((0xFC7 * 8 + 4), "STOP1");
            Bit((0xF68 * 8 + 4), "STOP2");
            Bit((0xF1B * 8 + 0), "STRA2");
            Bit((0xF1A * 8 + 0), "STRA3");
            Bit((0xF1B * 8 + 1), "STRB2");
            Bit((0xF1A * 8 + 1), "STRB3");
            Bit((0xF1B * 8 + 2), "STRC2");
            Bit((0xF1A * 8 + 2), "STRC3");
            Bit((0xF1B * 8 + 3), "STRD2");
            Bit((0xF1A * 8 + 3), "STRD3");
            Bit((0xF1B * 8 + 4), "STRSYNC2");
            Bit((0xF1A * 8 + 4), "STRSYNC3");
            Bit((0xFD1 * 8 + 0), "SWDTE");
            Bit((0xFD1 * 8 + 0), "SWDTEN");
            Bit((0xFAC * 8 + 4), "SYNC1");
            Bit((0xF21 * 8 + 4), "SYNC2");
            Bit((0xFD5 * 8 + 6), "T08BIT");
            Bit((0xF80 * 8 + 4), "T0CKI");
            Bit((0xFD5 * 8 + 5), "T0CS");
            Bit((0xFF2 * 8 + 5), "T0IE");
            Bit((0xFF2 * 8 + 2), "T0IF");
            Bit((0xFF1 * 8 + 2), "T0IP");
            Bit((0xFD5 * 8 + 0), "T0PS0");
            Bit((0xFD5 * 8 + 1), "T0PS1");
            Bit((0xFD5 * 8 + 2), "T0PS2");
            Bit((0xFD5 * 8 + 4), "T0SE");
            Bit((0xF33 * 8 + 0), "T10CKPS0");
            Bit((0xF33 * 8 + 1), "T10CKPS1");
            Bit((0xF33 * 8 + 3), "T10OUTPS0");
            Bit((0xF33 * 8 + 4), "T10OUTPS1");
            Bit((0xF33 * 8 + 5), "T10OUTPS2");
            Bit((0xF33 * 8 + 6), "T10OUTPS3");
            Bit((0xF30 * 8 + 0), "T12CKPS0");
            Bit((0xF30 * 8 + 1), "T12CKPS1");
            Bit((0xF30 * 8 + 3), "T12OUTPS0");
            Bit((0xF30 * 8 + 4), "T12OUTPS1");
            Bit((0xF30 * 8 + 5), "T12OUTPS2");
            Bit((0xF30 * 8 + 6), "T12OUTPS3");
            Bit((0xF80 * 8 + 5), "T1CKI");
            Bit((0xFCD * 8 + 4), "T1CKPS0");
            Bit((0xFCD * 8 + 5), "T1CKPS1");
            Bit((0xF81 * 8 + 5), "T1G");
            Bit((0xFAA * 8 + 3), "T1GGO");
            Bit((0xFAA * 8 + 3), "T1GGO_NOT_T1DONE");
            Bit((0xFAA * 8 + 3), "T1GGO_nT1DONE");
            Bit((0xFAA * 8 + 6), "T1GPOL");
            Bit((0xFAA * 8 + 4), "T1GSPM");
            Bit((0xFAA * 8 + 0), "T1GSS0");
            Bit((0xFAA * 8 + 1), "T1GSS1");
            Bit((0xFAA * 8 + 5), "T1GTM");
            Bit((0xFAA * 8 + 2), "T1GVAL");
            Bit((0xFCD * 8 + 3), "T1OSCEN");
            Bit((0xFCD * 8 + 7), "T1RD16");
            Bit((0xFCA * 8 + 0), "T2CKPS0");
            Bit((0xFCA * 8 + 1), "T2CKPS1");
            Bit((0xFCA * 8 + 3), "T2OUTPS0");
            Bit((0xFCA * 8 + 4), "T2OUTPS1");
            Bit((0xFCA * 8 + 5), "T2OUTPS2");
            Bit((0xFCA * 8 + 6), "T2OUTPS3");
            Bit((0xF81 * 8 + 5), "T3CKI");
            Bit((0xFB1 * 8 + 4), "T3CKPS0");
            Bit((0xFB1 * 8 + 5), "T3CKPS1");
            Bit((0xF80 * 8 + 5), "T3G");
            Bit((0xFB0 * 8 + 3), "T3GGO");
            Bit((0xFB0 * 8 + 3), "T3GGO_NOT_T3DONE");
            Bit((0xFB0 * 8 + 3), "T3GGO_nT3DONE");
            Bit((0xFB0 * 8 + 6), "T3GPOL");
            Bit((0xFB0 * 8 + 4), "T3GSPM");
            Bit((0xFB0 * 8 + 0), "T3GSS0");
            Bit((0xFB0 * 8 + 1), "T3GSS1");
            Bit((0xFB0 * 8 + 5), "T3GTM");
            Bit((0xFB0 * 8 + 2), "T3GVAL");
            Bit((0xFB1 * 8 + 7), "T3RD16");
            Bit((0xF6B * 8 + 0), "T4CKPS0");
            Bit((0xF6B * 8 + 1), "T4CKPS1");
            Bit((0xF6B * 8 + 3), "T4OUTPS0");
            Bit((0xF6B * 8 + 4), "T4OUTPS1");
            Bit((0xF6B * 8 + 5), "T4OUTPS2");
            Bit((0xF6B * 8 + 6), "T4OUTPS3");
            Bit((0xF83 * 8 + 1), "T5CKI");
            Bit((0xF7B * 8 + 4), "T5CKPS0");
            Bit((0xF7B * 8 + 5), "T5CKPS1");
            Bit((0xF86 * 8 + 4), "T5G");
            Bit((0xF7A * 8 + 3), "T5GGO");
            Bit((0xF7A * 8 + 3), "T5GGO_NOT_T5DONE");
            Bit((0xF7A * 8 + 3), "T5GGO_nT5DONE");
            Bit((0xF7A * 8 + 6), "T5GPOL");
            Bit((0xF7A * 8 + 4), "T5GSPM");
            Bit((0xF7A * 8 + 0), "T5GSS0");
            Bit((0xF7A * 8 + 1), "T5GSS1");
            Bit((0xF7A * 8 + 5), "T5GTM");
            Bit((0xF7A * 8 + 2), "T5GVAL");
            Bit((0xF39 * 8 + 0), "T6CKPS0");
            Bit((0xF39 * 8 + 1), "T6CKPS1");
            Bit((0xF39 * 8 + 3), "T6OUTPS0");
            Bit((0xF39 * 8 + 4), "T6OUTPS1");
            Bit((0xF39 * 8 + 5), "T6OUTPS2");
            Bit((0xF39 * 8 + 6), "T6OUTPS3");
            Bit((0xF86 * 8 + 4), "T7CKI");
            Bit((0xF3D * 8 + 4), "T7CKPS0");
            Bit((0xF3D * 8 + 5), "T7CKPS1");
            Bit((0xF83 * 8 + 1), "T7G");
            Bit((0xF3C * 8 + 3), "T7GGO");
            Bit((0xF3C * 8 + 3), "T7GGO_NOT_T7DONE");
            Bit((0xF3C * 8 + 3), "T7GGO_nT7DONE");
            Bit((0xF3C * 8 + 6), "T7GPOL");
            Bit((0xF3C * 8 + 4), "T7GSPM");
            Bit((0xF3C * 8 + 0), "T7GSS0");
            Bit((0xF3C * 8 + 1), "T7GSS1");
            Bit((0xF3C * 8 + 5), "T7GTM");
            Bit((0xF3C * 8 + 2), "T7GVAL");
            Bit((0xF36 * 8 + 0), "T8CKPS0");
            Bit((0xF36 * 8 + 1), "T8CKPS1");
            Bit((0xF36 * 8 + 3), "T8OUTPS0");
            Bit((0xF36 * 8 + 4), "T8OUTPS1");
            Bit((0xF36 * 8 + 5), "T8OUTPS2");
            Bit((0xF36 * 8 + 6), "T8OUTPS3");
            Bit((0xF57 * 8 + 4), "TGEN");
            Bit((0xFF2 * 8 + 5), "TMR0IE");
            Bit((0xFF2 * 8 + 2), "TMR0IF");
            Bit((0xFF1 * 8 + 2), "TMR0IP");
            Bit((0xFD5 * 8 + 7), "TMR0ON");
            Bit((0xFB9 * 8 + 5), "TMR10IE");
            Bit((0xFBA * 8 + 5), "TMR10IF");
            Bit((0xFD2 * 8 + 5), "TMR10IP");
            Bit((0xF17 * 8 + 7), "TMR10MD");
            Bit((0xF33 * 8 + 2), "TMR10ON");
            Bit((0xFB9 * 8 + 6), "TMR12IE");
            Bit((0xFBA * 8 + 6), "TMR12IF");
            Bit((0xFD2 * 8 + 6), "TMR12IP");
            Bit((0xF16 * 8 + 0), "TMR12MD");
            Bit((0xF30 * 8 + 2), "TMR12ON");
            Bit((0xFCD * 8 + 6), "TMR1CS0");
            Bit((0xFCD * 8 + 7), "TMR1CS1");
            Bit((0xFAA * 8 + 7), "TMR1GE");
            Bit((0xF9D * 8 + 2), "TMR1GIE");
            Bit((0xF9E * 8 + 2), "TMR1GIF");
            Bit((0xF9F * 8 + 2), "TMR1GIP");
            Bit((0xF9D * 8 + 0), "TMR1IE");
            Bit((0xF9E * 8 + 0), "TMR1IF");
            Bit((0xF9F * 8 + 0), "TMR1IP");
            Bit((0xF18 * 8 + 1), "TMR1MD");
            Bit((0xFCD * 8 + 0), "TMR1ON");
            Bit((0xF9D * 8 + 1), "TMR2IE");
            Bit((0xF9E * 8 + 1), "TMR2IF");
            Bit((0xF9F * 8 + 1), "TMR2IP");
            Bit((0xF18 * 8 + 2), "TMR2MD");
            Bit((0xFCA * 8 + 2), "TMR2ON");
            Bit((0xFB1 * 8 + 6), "TMR3CS0");
            Bit((0xFB1 * 8 + 7), "TMR3CS1");
            Bit((0xFB0 * 8 + 7), "TMR3GE");
            Bit((0xFA0 * 8 + 0), "TMR3GIE");
            Bit((0xFA1 * 8 + 0), "TMR3GIF");
            Bit((0xFA2 * 8 + 0), "TMR3GIP");
            Bit((0xFA0 * 8 + 1), "TMR3IE");
            Bit((0xFA1 * 8 + 1), "TMR3IF");
            Bit((0xFA2 * 8 + 1), "TMR3IP");
            Bit((0xF18 * 8 + 3), "TMR3MD");
            Bit((0xFB1 * 8 + 0), "TMR3ON");
            Bit((0xFB9 * 8 + 0), "TMR4IE");
            Bit((0xFBA * 8 + 0), "TMR4IF");
            Bit((0xFD2 * 8 + 0), "TMR4IP");
            Bit((0xF18 * 8 + 4), "TMR4MD");
            Bit((0xF6B * 8 + 2), "TMR4ON");
            Bit((0xF7B * 8 + 6), "TMR5CS0");
            Bit((0xF7B * 8 + 7), "TMR5CS1");
            Bit((0xF7A * 8 + 7), "TMR5GE");
            Bit((0xFA3 * 8 + 7), "TMR5GIE");
            Bit((0xFA4 * 8 + 7), "TMR5GIF");
            Bit((0xFA5 * 8 + 7), "TMR5GIP");
            Bit((0xFB9 * 8 + 1), "TMR5IE");
            Bit((0xFBA * 8 + 1), "TMR5IF");
            Bit((0xFD2 * 8 + 1), "TMR5IP");
            Bit((0xF17 * 8 + 3), "TMR5MD");
            Bit((0xF7B * 8 + 0), "TMR5ON");
            Bit((0xFB9 * 8 + 2), "TMR6IE");
            Bit((0xFBA * 8 + 2), "TMR6IF");
            Bit((0xFD2 * 8 + 2), "TMR6IP");
            Bit((0xF17 * 8 + 4), "TMR6MD");
            Bit((0xF39 * 8 + 2), "TMR6ON");
            Bit((0xF3D * 8 + 6), "TMR7CS0");
            Bit((0xF3D * 8 + 7), "TMR7CS1");
            Bit((0xF3C * 8 + 7), "TMR7GE");
            Bit((0xFB9 * 8 + 7), "TMR7GIE");
            Bit((0xFBA * 8 + 7), "TMR7GIF");
            Bit((0xFD2 * 8 + 7), "TMR7GIP");
            Bit((0xFB9 * 8 + 3), "TMR7IE");
            Bit((0xFBA * 8 + 3), "TMR7IF");
            Bit((0xFD2 * 8 + 3), "TMR7IP");
            Bit((0xF17 * 8 + 5), "TMR7MD");
            Bit((0xF3D * 8 + 0), "TMR7ON");
            Bit((0xFB9 * 8 + 4), "TMR8IE");
            Bit((0xFBA * 8 + 4), "TMR8IF");
            Bit((0xFD2 * 8 + 4), "TMR8IP");
            Bit((0xF17 * 8 + 6), "TMR8MD");
            Bit((0xF36 * 8 + 2), "TMR8ON");
            Bit((0xFD0 * 8 + 3), "TO");
            Bit((0xFC1 * 8 + 6), "TRIGSEL0");
            Bit((0xFC1 * 8 + 7), "TRIGSEL1");
            Bit((0xF92 * 8 + 0), "TRISA0");
            Bit((0xF92 * 8 + 1), "TRISA1");
            Bit((0xF92 * 8 + 2), "TRISA2");
            Bit((0xF92 * 8 + 3), "TRISA3");
            Bit((0xF92 * 8 + 4), "TRISA4");
            Bit((0xF92 * 8 + 5), "TRISA5");
            Bit((0xF92 * 8 + 6), "TRISA6");
            Bit((0xF92 * 8 + 7), "TRISA7");
            Bit((0xF93 * 8 + 0), "TRISB0");
            Bit((0xF93 * 8 + 1), "TRISB1");
            Bit((0xF93 * 8 + 2), "TRISB2");
            Bit((0xF93 * 8 + 3), "TRISB3");
            Bit((0xF93 * 8 + 4), "TRISB4");
            Bit((0xF93 * 8 + 5), "TRISB5");
            Bit((0xF93 * 8 + 6), "TRISB6");
            Bit((0xF93 * 8 + 7), "TRISB7");
            Bit((0xF94 * 8 + 0), "TRISC0");
            Bit((0xF94 * 8 + 1), "TRISC1");
            Bit((0xF94 * 8 + 2), "TRISC2");
            Bit((0xF94 * 8 + 3), "TRISC3");
            Bit((0xF94 * 8 + 4), "TRISC4");
            Bit((0xF94 * 8 + 5), "TRISC5");
            Bit((0xF94 * 8 + 6), "TRISC6");
            Bit((0xF94 * 8 + 7), "TRISC7");
            Bit((0xF95 * 8 + 0), "TRISD0");
            Bit((0xF95 * 8 + 1), "TRISD1");
            Bit((0xF95 * 8 + 2), "TRISD2");
            Bit((0xF95 * 8 + 3), "TRISD3");
            Bit((0xF95 * 8 + 4), "TRISD4");
            Bit((0xF95 * 8 + 5), "TRISD5");
            Bit((0xF95 * 8 + 6), "TRISD6");
            Bit((0xF95 * 8 + 7), "TRISD7");
            Bit((0xF96 * 8 + 0), "TRISE0");
            Bit((0xF96 * 8 + 1), "TRISE1");
            Bit((0xF96 * 8 + 2), "TRISE2");
            Bit((0xF96 * 8 + 3), "TRISE3");
            Bit((0xF96 * 8 + 4), "TRISE4");
            Bit((0xF96 * 8 + 5), "TRISE5");
            Bit((0xF96 * 8 + 6), "TRISE6");
            Bit((0xF96 * 8 + 7), "TRISE7");
            Bit((0xF97 * 8 + 1), "TRISF1");
            Bit((0xF97 * 8 + 2), "TRISF2");
            Bit((0xF97 * 8 + 3), "TRISF3");
            Bit((0xF97 * 8 + 4), "TRISF4");
            Bit((0xF97 * 8 + 5), "TRISF5");
            Bit((0xF97 * 8 + 6), "TRISF6");
            Bit((0xF97 * 8 + 7), "TRISF7");
            Bit((0xF98 * 8 + 0), "TRISG0");
            Bit((0xF98 * 8 + 1), "TRISG1");
            Bit((0xF98 * 8 + 2), "TRISG2");
            Bit((0xF98 * 8 + 3), "TRISG3");
            Bit((0xF98 * 8 + 4), "TRISG4");
            Bit((0xFAC * 8 + 1), "TRMT1");
            Bit((0xF21 * 8 + 1), "TRMT2");
            Bit((0xF9B * 8 + 0), "TUN0");
            Bit((0xF9B * 8 + 1), "TUN1");
            Bit((0xF9B * 8 + 2), "TUN2");
            Bit((0xF9B * 8 + 3), "TUN3");
            Bit((0xF9B * 8 + 4), "TUN4");
            Bit((0xF9B * 8 + 5), "TUN5");
            Bit((0xF82 * 8 + 6), "TX1");
            Bit((0xF9D * 8 + 4), "TX1IE");
            Bit((0xF9E * 8 + 4), "TX1IF");
            Bit((0xF9F * 8 + 4), "TX1IP");
            Bit((0xF86 * 8 + 1), "TX2");
            Bit((0xFA3 * 8 + 4), "TX2IE");
            Bit((0xFA4 * 8 + 4), "TX2IF");
            Bit((0xFA5 * 8 + 4), "TX2IP");
            Bit((0xFAC * 8 + 6), "TX8_9");
            Bit((0xF21 * 8 + 6), "TX8_92");
            Bit((0xFAC * 8 + 6), "TX91");
            Bit((0xF21 * 8 + 6), "TX92");
            Bit((0xFAC * 8 + 0), "TX9D1");
            Bit((0xF21 * 8 + 0), "TX9D2");
            Bit((0xFA3 * 8 + 2), "TXB0IE");
            Bit((0xFA3 * 8 + 3), "TXB1IE");
            Bit((0xFA3 * 8 + 4), "TXB2IE");
            Bit((0xFA3 * 8 + 4), "TXBNIE");
            Bit((0xFA4 * 8 + 4), "TXBNIF");
            Bit((0xFA5 * 8 + 4), "TXBNIP");
            Bit((0xF65 * 8 + 4), "TXCKP1");
            Bit((0xF20 * 8 + 4), "TXCKP2");
            Bit((0xFAC * 8 + 0), "TXD8");
            Bit((0xF21 * 8 + 0), "TXD82");
            Bit((0xFAC * 8 + 5), "TXEN1");
            Bit((0xF21 * 8 + 5), "TXEN2");
            Bit((0xF9D * 8 + 4), "TXIE");
            Bit((0xF9E * 8 + 4), "TXIF");
            Bit((0xF9F * 8 + 4), "TXIP");
            Bit((0xF27 * 8 + 6), "U1OD");
            Bit((0xF27 * 8 + 7), "U2OD");
            Bit((0xFC7 * 8 + 1), "UA1");
            Bit((0xF68 * 8 + 1), "UA2");
            Bit((0xF19 * 8 + 3), "UART1MD");
            Bit((0xF19 * 8 + 4), "UART2MD");
            Bit((0xFD1 * 8 + 2), "ULPEN");
            Bit((0xFD1 * 8 + 5), "ULPLVL");
            Bit((0xFD1 * 8 + 1), "ULPSINK");
            Bit((0xF80 * 8 + 0), "ULPWU");
            Bit((0xF80 * 8 + 0), "ULPWUIN");
            Bit((0xFC1 * 8 + 4), "VCFG0");
            Bit((0xFC1 * 8 + 4), "VCFG01");
            Bit((0xFC1 * 8 + 5), "VCFG1");
            Bit((0xFC1 * 8 + 5), "VCFG11");
            Bit((0xFA8 * 8 + 7), "VDIRMAG");
            Bit((0xFC1 * 8 + 3), "VNCFG");
            Bit((0xF80 * 8 + 2), "VREF_MINUS");
            Bit((0xF80 * 8 + 3), "VREF_PLUS");
            Bit((0xF65 * 8 + 1), "W4E");
            Bit((0xFCB * 8 + 4), "WAIT0");
            Bit((0xFCB * 8 + 5), "WAIT1");
            Bit((0xF5D * 8 + 6), "WAITB0");
            Bit((0xF5D * 8 + 7), "WAITB1");
            Bit((0xF5D * 8 + 0), "WAITE0");
            Bit((0xF5D * 8 + 1), "WAITE1");
            Bit((0xF5D * 8 + 2), "WAITM0");
            Bit((0xF5D * 8 + 3), "WAITM1");
            Bit((0xF5D * 8 + 4), "WAITM2");
            Bit((0xF5D * 8 + 5), "WAITM3");
            Bit((0xFC6 * 8 + 7), "WCOL1");
            Bit((0xF67 * 8 + 7), "WCOL2");
            Bit((0xFCB * 8 + 0), "WM0");
            Bit((0xFCB * 8 + 1), "WM1");
            Bit((0xF7F * 8 + 1), "WR");
            Bit((0xF84 * 8 + 1), "WRE");
            Bit((0xF7F * 8 + 2), "WREN");
            Bit((0xF7F * 8 + 3), "WRERR");
            Bit((0xF65 * 8 + 1), "WUE1");
            Bit((0xF20 * 8 + 1), "WUE2");
            Bit((0xFD8 * 8 + 2), "ZERO");
            Bit((0xF68 * 8 + 5), "nA2");
            Bit((0xF68 * 8 + 5), "nADDRESS2");
            Bit((0xFD0 * 8 + 0), "nBOR");
            Bit((0xFD0 * 8 + 5), "nCM");
            Bit((0xF84 * 8 + 2), "nCS");
            Bit((0xFC2 * 8 + 1), "nDONE");
            Bit((0xFD0 * 8 + 2), "nPD");
            Bit((0xFD0 * 8 + 1), "nPOR");
            Bit((0xFF1 * 8 + 7), "nRBPU");
            Bit((0xFAB * 8 + 6), "nRC8");
            Bit((0xF84 * 8 + 0), "nRD");
            Bit((0xFD0 * 8 + 4), "nRI");
            Bit((0xF83 * 8 + 7), "nSS2");
            Bit((0xFAA * 8 + 3), "nT1DONE");
            Bit((0xFCD * 8 + 2), "nT1SYNC");
            Bit((0xFB0 * 8 + 3), "nT3DONE");
            Bit((0xFB1 * 8 + 2), "nT3SYNC");
            Bit((0xF7A * 8 + 3), "nT5DONE");
            Bit((0xF7B * 8 + 2), "nT5SYNC");
            Bit((0xF3C * 8 + 3), "nT7DONE");
            Bit((0xF3D * 8 + 2), "nT7SYNC");
            Bit((0xFD0 * 8 + 3), "nTO");
            Bit((0xFAC * 8 + 6), "nTX8");
            Bit((0xF68 * 8 + 2), "nW2");
            Bit((0xF84 * 8 + 1), "nWR");
            Bit((0xF68 * 8 + 2), "nWRITE2");
        }

        static Pic18Sfr()
        {
            Regs();
            Bits();
        }

        public static string LookupBit(int bit)
        {
            if (bits.ContainsKey(bit))
                return bits[bit];
            return null;
        }

        public static string LookupSfr(int addr)
        {
            if (regs.ContainsKey(addr))
                return regs[addr];
            return null;
        }
    }
}
