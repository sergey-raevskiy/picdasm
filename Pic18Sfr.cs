using System.Collections.Generic;

namespace picdasm
{
    class Pic18Sfr
    {
        private static Dictionary<int, string> bits = new Dictionary<int, string>();
        private static Dictionary<int, string> regs = new Dictionary<int, string>();

        private static void Bit(int at, string name)
        {
            if (!bits.ContainsKey(at))
            {
                bits.Add(at, name);
            }
            else if (bits[at].Length > name.Length)
            {
                bits[at] = name;
            }
        }


        private static void Reg(int at, string name)
        {
            if (!regs.ContainsKey(at))
            {
                regs.Add(at, name);
            }
            else if (regs[at].Length > name.Length)
            {
                regs[at] = name;
            }
        }

        static Pic18Sfr()
        {
            Reg(0xF54, "PADCFG1");
            Reg(0xF55, "CTMUICON");
            Reg(0xF56, "CTMUCONL");
            Reg(0xF57, "CTMUCONH");
            Reg(0xF58, "ALRMVALL");
            Reg(0xF59, "ALRMVALH");
            Reg(0xF5A, "ALRMRPT");
            Reg(0xF5B, "ALRMCFG");
            Reg(0xF5C, "RTCVALL");
            Reg(0xF5D, "RTCVALH");
            Reg(0xF5E, "RTCCAL");
            Reg(0xF5F, "RTCCFG");
            Reg(0xF60, "RCSTA2");
            Reg(0xF61, "TXSTA2");
            Reg(0xF62, "TXREG2");
            Reg(0xF63, "RCREG2");
            Reg(0xF64, "SPBRG2");
            Reg(0xF65, "CCP2CON");
            Reg(0xF65, "ECCP2CON");
            Reg(0xF66, "CCPR2L");
            Reg(0xF67, "CCPR2H");
            Reg(0xF68, "CCP1CON");
            Reg(0xF68, "ECCP1CON");
            Reg(0xF69, "CCPR1L");
            Reg(0xF6A, "CCPR1H");
            Reg(0xF6C, "LCDDATA6");
            Reg(0xF6D, "LCDDATA7");
            Reg(0xF6E, "LCDDATA8");
            Reg(0xF6F, "LCDDATA9");
            Reg(0xF70, "LCDDATA10");
            Reg(0xF72, "LCDDATA12");
            Reg(0xF73, "LCDDATA13");
            Reg(0xF74, "LCDDATA14");
            Reg(0xF75, "LCDDATA15");
            Reg(0xF76, "LCDDATA16");
            Reg(0xF78, "LCDDATA18");
            Reg(0xF79, "LCDDATA19");
            Reg(0xF7A, "LCDDATA20");
            Reg(0xF7B, "LCDDATA21");
            Reg(0xF7C, "LCDDATA22");
            Reg(0xF7E, "BAUDCON1");
            Reg(0xF7E, "BAUDCON");
            Reg(0xF7E, "BAUDCTL");
            Reg(0xF7F, "SPBRGH1");
            Reg(0xF7F, "SPBRGH");
            Reg(0xF80, "PORTA");
            Reg(0xF81, "PORTB");
            Reg(0xF82, "PORTC");
            Reg(0xF83, "PORTD");
            Reg(0xF84, "PORTE");
            Reg(0xF85, "PORTF");
            Reg(0xF86, "PORTG");
            Reg(0xF89, "LATA");
            Reg(0xF8A, "LATB");
            Reg(0xF8B, "LATC");
            Reg(0xF8C, "LATD");
            Reg(0xF8D, "LATE");
            Reg(0xF8E, "LATF");
            Reg(0xF8F, "LATG");
            Reg(0xF92, "TRISA");
            Reg(0xF93, "TRISB");
            Reg(0xF94, "TRISC");
            Reg(0xF95, "TRISD");
            Reg(0xF96, "TRISE");
            Reg(0xF97, "TRISF");
            Reg(0xF98, "TRISG");
            Reg(0xF9B, "OSCTUNE");
            Reg(0xF9D, "PIE1");
            Reg(0xF9E, "PIR1");
            Reg(0xF9F, "IPR1");
            Reg(0xFA0, "PIE2");
            Reg(0xFA1, "PIR2");
            Reg(0xFA2, "IPR2");
            Reg(0xFA3, "PIE3");
            Reg(0xFA4, "PIR3");
            Reg(0xFA5, "IPR3");
            Reg(0xFA6, "EECON1");
            Reg(0xFA7, "EECON2");
            Reg(0xFA8, "LCDCON");
            Reg(0xFA9, "LCDSE0");
            Reg(0xFAA, "LCDPS");
            Reg(0xFAB, "RCSTA1");
            Reg(0xFAB, "RCSTA");
            Reg(0xFAC, "TXSTA1");
            Reg(0xFAC, "TXSTA");
            Reg(0xFAD, "TXREG1");
            Reg(0xFAD, "TXREG");
            Reg(0xFAE, "RCREG1");
            Reg(0xFAE, "RCREG");
            Reg(0xFAF, "SPBRG1");
            Reg(0xFAF, "SPBRG");
            Reg(0xFB1, "T3CON");
            Reg(0xFB2, "TMR3L");
            Reg(0xFB3, "TMR3H");
            Reg(0xFB4, "CMCON");
            Reg(0xFB5, "CVRCON");
            Reg(0xFB6, "LCDSE1");
            Reg(0xFB7, "LCDSE2");
            Reg(0xFB8, "LCDSE3");
            Reg(0xFB9, "LCDSE4");
            Reg(0xFBB, "LCDDATA0");
            Reg(0xFBC, "LCDDATA1");
            Reg(0xFBD, "LCDDATA2");
            Reg(0xFBE, "LCDDATA3");
            Reg(0xFBF, "LCDDATA4");
            Reg(0xFC0, "ADCON2");
            Reg(0xFC1, "ADCON1");
            Reg(0xFC2, "ADCON0");
            Reg(0xFC3, "ADRESL");
            Reg(0xFC4, "ADRESH");
            Reg(0xFC5, "SSP1CON2");
            Reg(0xFC5, "SSPCON2");
            Reg(0xFC6, "SSP1CON1");
            Reg(0xFC6, "SSPCON1");
            Reg(0xFC7, "SSP1STAT");
            Reg(0xFC7, "SSPSTAT");
            Reg(0xFC8, "SSP1ADD");
            Reg(0xFC8, "SSPADD");
            Reg(0xFC9, "SSP1BUF");
            Reg(0xFC9, "SSPBUF");
            Reg(0xFCA, "T2CON");
            Reg(0xFCB, "PR2");
            Reg(0xFCB, "MEMCON");
            Reg(0xFCC, "TMR2");
            Reg(0xFCD, "T1CON");
            Reg(0xFCE, "TMR1L");
            Reg(0xFCF, "TMR1H");
            Reg(0xFD0, "RCON");
            Reg(0xFD1, "WDTCON");
            Reg(0xFD2, "LCDREG");
            Reg(0xFD3, "OSCCON");
            Reg(0xFD5, "T0CON");
            Reg(0xFD6, "TMR0L");
            Reg(0xFD7, "TMR0H");
            Reg(0xFD8, "STATUS");
            Reg(0xFD9, "FSR2L");
            Reg(0xFDA, "FSR2H");
            Reg(0xFDB, "PLUSW2");
            Reg(0xFDC, "PREINC2");
            Reg(0xFDD, "POSTDEC2");
            Reg(0xFDE, "POSTINC2");
            Reg(0xFDF, "INDF2");
            Reg(0xFE0, "BSR");
            Reg(0xFE1, "FSR1L");
            Reg(0xFE2, "FSR1H");
            Reg(0xFE3, "PLUSW1");
            Reg(0xFE4, "PREINC1");
            Reg(0xFE5, "POSTDEC1");
            Reg(0xFE6, "POSTINC1");
            Reg(0xFE7, "INDF1");
            Reg(0xFE8, "WREG");
            Reg(0xFE9, "FSR0L");
            Reg(0xFEA, "FSR0H");
            Reg(0xFEB, "PLUSW0");
            Reg(0xFEC, "PREINC0");
            Reg(0xFED, "POSTDEC0");
            Reg(0xFEE, "POSTINC0");
            Reg(0xFEF, "INDF0");
            Reg(0xFF0, "INTCON3");
            Reg(0xFF1, "INTCON2");
            Reg(0xFF2, "INTCON");
            Reg(0xFF3, "PRODL");
            Reg(0xFF4, "PRODH");
            Reg(0xFF5, "TABLAT");
            Reg(0xFF6, "TBLPTRL");
            Reg(0xFF7, "TBLPTRH");
            Reg(0xFF8, "TBLPTRU");
            Reg(0xFF9, "PCL");
            Reg(0xFFA, "PCLATH");
            Reg(0xFFB, "PCLATU");
            Reg(0xFFC, "STKPTR");
            Reg(0xFFD, "TOSL");
            Reg(0xFFE, "TOSH");
            Reg(0xFFF, "TOSU");

            Bit((0xF7E * 8 + 0), "ABDEN");
            Bit((0xF7E * 8 + 0), "ABDEN1");
            Bit((0xF7E * 8 + 7), "ABDOVF");
            Bit((0xF7E * 8 + 7), "ABDOVF1");
            Bit((0xFC5 * 8 + 5), "ACKDT");
            Bit((0xFC5 * 8 + 5), "ACKDT1");
            Bit((0xFC5 * 8 + 4), "ACKEN");
            Bit((0xFC5 * 8 + 4), "ACKEN1");
            Bit((0xFC5 * 8 + 6), "ACKSTAT");
            Bit((0xFC5 * 8 + 6), "ACKSTAT1");
            Bit((0xFC0 * 8 + 3), "ACQT0");
            Bit((0xFC0 * 8 + 4), "ACQT1");
            Bit((0xFC0 * 8 + 5), "ACQT2");
            Bit((0xFC2 * 8 + 7), "ADCAL");
            Bit((0xFC0 * 8 + 0), "ADCS0");
            Bit((0xFC0 * 8 + 1), "ADCS1");
            Bit((0xFC0 * 8 + 2), "ADCS2");
            Bit((0xFAB * 8 + 3), "ADDEN");
            Bit((0xFAB * 8 + 3), "ADDEN1");
            Bit((0xF60 * 8 + 3), "ADDEN2");
            Bit((0xFAB * 8 + 3), "ADEN");
            Bit((0xFC0 * 8 + 7), "ADFM");
            Bit((0xF9D * 8 + 6), "ADIE");
            Bit((0xF9E * 8 + 6), "ADIF");
            Bit((0xF9F * 8 + 6), "ADIP");
            Bit((0xFC5 * 8 + 1), "ADMSK1");
            Bit((0xFC5 * 8 + 1), "ADMSK11");
            Bit((0xFC5 * 8 + 2), "ADMSK2");
            Bit((0xFC5 * 8 + 2), "ADMSK21");
            Bit((0xFC5 * 8 + 3), "ADMSK3");
            Bit((0xFC5 * 8 + 3), "ADMSK31");
            Bit((0xFC5 * 8 + 4), "ADMSK4");
            Bit((0xFC5 * 8 + 4), "ADMSK41");
            Bit((0xFC5 * 8 + 5), "ADMSK5");
            Bit((0xFC5 * 8 + 5), "ADMSK51");
            Bit((0xFC2 * 8 + 0), "ADON");
            Bit((0xF5B * 8 + 7), "ALRMEN");
            Bit((0xF5B * 8 + 0), "ALRMPTR0");
            Bit((0xF5B * 8 + 1), "ALRMPTR1");
            Bit((0xF5B * 8 + 2), "AMASK0");
            Bit((0xF5B * 8 + 3), "AMASK1");
            Bit((0xF5B * 8 + 4), "AMASK2");
            Bit((0xF5B * 8 + 5), "AMASK3");
            Bit((0xF80 * 8 + 0), "AN0");
            Bit((0xF80 * 8 + 1), "AN1");
            Bit((0xF85 * 8 + 5), "AN10");
            Bit((0xF85 * 8 + 6), "AN11");
            Bit((0xF80 * 8 + 2), "AN2");
            Bit((0xF80 * 8 + 3), "AN3");
            Bit((0xF80 * 8 + 5), "AN4");
            Bit((0xF85 * 8 + 7), "AN5");
            Bit((0xF85 * 8 + 1), "AN6");
            Bit((0xF85 * 8 + 2), "AN7");
            Bit((0xF85 * 8 + 3), "AN8");
            Bit((0xF85 * 8 + 4), "AN9");
            Bit((0xF5A * 8 + 0), "ARPT0");
            Bit((0xF5A * 8 + 1), "ARPT1");
            Bit((0xF5A * 8 + 2), "ARPT2");
            Bit((0xF5A * 8 + 3), "ARPT3");
            Bit((0xF5A * 8 + 4), "ARPT4");
            Bit((0xF5A * 8 + 5), "ARPT5");
            Bit((0xF5A * 8 + 6), "ARPT6");
            Bit((0xF5A * 8 + 7), "ARPT7");
            Bit((0xFA0 * 8 + 3), "BCL1IE");
            Bit((0xFA1 * 8 + 3), "BCL1IF");
            Bit((0xFA2 * 8 + 3), "BCL1IP");
            Bit((0xFA0 * 8 + 3), "BCLIE");
            Bit((0xFA1 * 8 + 3), "BCLIF");
            Bit((0xFA2 * 8 + 3), "BCLIP");
            Bit((0xFC7 * 8 + 0), "BF");
            Bit((0xFC7 * 8 + 0), "BF1");
            Bit((0xFD2 * 8 + 3), "BIAS0");
            Bit((0xFD2 * 8 + 4), "BIAS1");
            Bit((0xFD2 * 8 + 5), "BIAS2");
            Bit((0xFAA * 8 + 6), "BIASMD");
            Bit((0xFD0 * 8 + 0), "BOR");
            Bit((0xF7E * 8 + 3), "BRG16");
            Bit((0xF7E * 8 + 3), "BRG161");
            Bit((0xFAC * 8 + 2), "BRGH");
            Bit((0xFAC * 8 + 2), "BRGH1");
            Bit((0xF61 * 8 + 2), "BRGH2");
            Bit((0xF85 * 8 + 6), "C1INA");
            Bit((0xF85 * 8 + 5), "C1INB");
            Bit((0xFB4 * 8 + 4), "C1INV");
            Bit((0xFB4 * 8 + 6), "C1OUT");
            Bit((0xF85 * 8 + 1), "C1OUTF");
            Bit((0xF85 * 8 + 4), "C2INA");
            Bit((0xF85 * 8 + 3), "C2INB");
            Bit((0xFB4 * 8 + 5), "C2INV");
            Bit((0xFB4 * 8 + 7), "C2OUT");
            Bit((0xF85 * 8 + 2), "C2OUTF");
            Bit((0xF86 * 8 + 1), "C3OUTG");
            Bit((0xF5E * 8 + 0), "CAL0");
            Bit((0xF5E * 8 + 1), "CAL1");
            Bit((0xF5E * 8 + 2), "CAL2");
            Bit((0xF5E * 8 + 3), "CAL3");
            Bit((0xF5E * 8 + 4), "CAL4");
            Bit((0xF5E * 8 + 5), "CAL5");
            Bit((0xF5E * 8 + 6), "CAL6");
            Bit((0xF5E * 8 + 7), "CAL7");
            Bit((0xFD8 * 8 + 0), "CARRY");
            Bit((0xF82 * 8 + 2), "CCP1");
            Bit((0xFA3 * 8 + 1), "CCP1IE");
            Bit((0xFA4 * 8 + 1), "CCP1IF");
            Bit((0xFA5 * 8 + 1), "CCP1IP");
            Bit((0xF68 * 8 + 0), "CCP1M0");
            Bit((0xF68 * 8 + 1), "CCP1M1");
            Bit((0xF68 * 8 + 2), "CCP1M2");
            Bit((0xF68 * 8 + 3), "CCP1M3");
            Bit((0xF98 * 8 + 5), "CCP1OD");
            Bit((0xF82 * 8 + 1), "CCP2");
            Bit((0xF84 * 8 + 7), "CCP2E");
            Bit((0xFA3 * 8 + 2), "CCP2IE");
            Bit((0xFA4 * 8 + 2), "CCP2IF");
            Bit((0xFA5 * 8 + 2), "CCP2IP");
            Bit((0xF65 * 8 + 0), "CCP2M0");
            Bit((0xF65 * 8 + 1), "CCP2M1");
            Bit((0xF65 * 8 + 2), "CCP2M2");
            Bit((0xF65 * 8 + 3), "CCP2M3");
            Bit((0xF98 * 8 + 6), "CCP2OD");
            Bit((0xF81 * 8 + 3), "CCP2_PA2");
            Bit((0xF84 * 8 + 6), "CCP6E");
            Bit((0xF84 * 8 + 5), "CCP7E");
            Bit((0xF84 * 8 + 4), "CCP8E");
            Bit((0xF84 * 8 + 3), "CCP9E");
            Bit((0xF5B * 8 + 6), "CHIME");
            Bit((0xFC2 * 8 + 2), "CHS0");
            Bit((0xFC2 * 8 + 3), "CHS1");
            Bit((0xFC2 * 8 + 4), "CHS2");
            Bit((0xFC2 * 8 + 5), "CHS3");
            Bit((0xFC1 * 8 + 3), "CHSN3");
            Bit((0xFB4 * 8 + 3), "CIS");
            Bit((0xF82 * 8 + 6), "CK1");
            Bit((0xF86 * 8 + 1), "CK2");
            Bit((0xFC7 * 8 + 6), "CKE");
            Bit((0xFC7 * 8 + 6), "CKE1");
            Bit((0xFC6 * 8 + 4), "CKP");
            Bit((0xFC6 * 8 + 4), "CKP1");
            Bit((0xFD2 * 8 + 0), "CKSEL0");
            Bit((0xFD2 * 8 + 1), "CKSEL1");
            Bit((0xF7E * 8 + 4), "CKTXP");
            Bit((0xF80 * 8 + 7), "CLKI");
            Bit((0xF80 * 8 + 6), "CLKO");
            Bit((0xFD0 * 8 + 5), "CM");
            Bit((0xFB4 * 8 + 0), "CM0");
            Bit((0xFB4 * 8 + 1), "CM1");
            Bit((0xFB4 * 8 + 2), "CM2");
            Bit((0xFB4 * 8 + 0), "CMEN0");
            Bit((0xFB4 * 8 + 1), "CMEN1");
            Bit((0xFB4 * 8 + 2), "CMEN2");
            Bit((0xFA0 * 8 + 6), "CMIE");
            Bit((0xFA1 * 8 + 6), "CMIF");
            Bit((0xFA2 * 8 + 6), "CMIP");
            Bit((0xF84 * 8 + 3), "COM0");
            Bit((0xF84 * 8 + 4), "COM1");
            Bit((0xF84 * 8 + 5), "COM2");
            Bit((0xF84 * 8 + 6), "COM3");
            Bit((0xFD2 * 8 + 6), "CPEN");
            Bit((0xFAB * 8 + 4), "CREN");
            Bit((0xFAB * 8 + 4), "CREN1");
            Bit((0xF60 * 8 + 4), "CREN2");
            Bit((0xFA8 * 8 + 2), "CS0");
            Bit((0xFA8 * 8 + 3), "CS1");
            Bit((0xFAC * 8 + 7), "CSRC");
            Bit((0xFAC * 8 + 7), "CSRC1");
            Bit((0xF61 * 8 + 7), "CSRC2");
            Bit((0xF81 * 8 + 2), "CTED1");
            Bit((0xF81 * 8 + 3), "CTED2");
            Bit((0xF57 * 8 + 7), "CTMUEN");
            Bit((0xFA3 * 8 + 3), "CTMUIE");
            Bit((0xFA4 * 8 + 3), "CTMUIF");
            Bit((0xFA5 * 8 + 3), "CTMUIP");
            Bit((0xF57 * 8 + 5), "CTMUSIDL");
            Bit((0xF83 * 8 + 0), "CTPLS");
            Bit((0xF57 * 8 + 0), "CTTRIG");
            Bit((0xFB5 * 8 + 0), "CVR0");
            Bit((0xFB5 * 8 + 1), "CVR1");
            Bit((0xFB5 * 8 + 2), "CVR2");
            Bit((0xFB5 * 8 + 3), "CVR3");
            Bit((0xF85 * 8 + 5), "CVREF");
            Bit((0xFB5 * 8 + 7), "CVREN");
            Bit((0xFB5 * 8 + 6), "CVROE");
            Bit((0xFB5 * 8 + 6), "CVROEN");
            Bit((0xFB5 * 8 + 5), "CVRR");
            Bit((0xFB5 * 8 + 4), "CVRSS");
            Bit((0xFC7 * 8 + 5), "DA");
            Bit((0xFC7 * 8 + 5), "DA1");
            Bit((0xFC7 * 8 + 5), "DATA_ADDRESS");
            Bit((0xFD8 * 8 + 1), "DC");
            Bit((0xF68 * 8 + 4), "DC1B0");
            Bit((0xF68 * 8 + 5), "DC1B1");
            Bit((0xF65 * 8 + 4), "DC2B0");
            Bit((0xF65 * 8 + 5), "DC2B1");
            Bit((0xF68 * 8 + 5), "DCCP1X");
            Bit((0xF68 * 8 + 4), "DCCP1Y");
            Bit((0xF65 * 8 + 5), "DCCP2X");
            Bit((0xF65 * 8 + 4), "DCCP2Y");
            Bit((0xFC2 * 8 + 1), "DONE");
            Bit((0xF82 * 8 + 7), "DT1");
            Bit((0xF86 * 8 + 2), "DT2");
            Bit((0xF7E * 8 + 5), "DTRXP");
            Bit((0xF7E * 8 + 5), "DTRXP1");
            Bit((0xFC7 * 8 + 5), "D_A");
            Bit((0xFC7 * 8 + 5), "D_NOT_A");
            Bit((0xFC7 * 8 + 5), "D_nA");
            Bit((0xFCB * 8 + 7), "EBDIS");
            Bit((0xF56 * 8 + 4), "EDG1POL");
            Bit((0xF56 * 8 + 2), "EDG1SEL0");
            Bit((0xF56 * 8 + 3), "EDG1SEL1");
            Bit((0xF56 * 8 + 0), "EDG1STAT");
            Bit((0xF56 * 8 + 7), "EDG2POL");
            Bit((0xF56 * 8 + 5), "EDG2SEL0");
            Bit((0xF56 * 8 + 6), "EDG2SEL1");
            Bit((0xF56 * 8 + 1), "EDG2STAT");
            Bit((0xF57 * 8 + 3), "EDGEN");
            Bit((0xF57 * 8 + 2), "EDGSEQEN");
            Bit((0xFAB * 8 + 2), "FERR");
            Bit((0xFAB * 8 + 2), "FERR1");
            Bit((0xF60 * 8 + 2), "FERR2");
            Bit((0xFA6 * 8 + 4), "FREE");
            Bit((0xFC5 * 8 + 7), "GCEN");
            Bit((0xFC5 * 8 + 7), "GCEN1");
            Bit((0xFF2 * 8 + 7), "GIE");
            Bit((0xFF2 * 8 + 7), "GIEH");
            Bit((0xFF2 * 8 + 6), "GIEL");
            Bit((0xFF2 * 8 + 7), "GIE_GIEH");
            Bit((0xFC2 * 8 + 1), "GO");
            Bit((0xFC2 * 8 + 1), "GODONE");
            Bit((0xFC2 * 8 + 1), "GO_DONE");
            Bit((0xFC2 * 8 + 1), "GO_NOT_DONE");
            Bit((0xFC2 * 8 + 1), "GO_nDONE");
            Bit((0xF5F * 8 + 3), "HALFSEC");
            Bit((0xFC7 * 8 + 5), "I2C_DAT");
            Bit((0xFC7 * 8 + 2), "I2C_READ");
            Bit((0xFC7 * 8 + 3), "I2C_START");
            Bit((0xFC7 * 8 + 4), "I2C_STOP");
            Bit((0xF57 * 8 + 1), "IDISSEN");
            Bit((0xFD3 * 8 + 7), "IDLEN");
            Bit((0xF81 * 8 + 0), "INT0");
            Bit((0xFF2 * 8 + 4), "INT0E");
            Bit((0xFF2 * 8 + 1), "INT0F");
            Bit((0xFF2 * 8 + 4), "INT0IE");
            Bit((0xFF2 * 8 + 1), "INT0IF");
            Bit((0xF81 * 8 + 1), "INT1");
            Bit((0xFF0 * 8 + 3), "INT1E");
            Bit((0xFF0 * 8 + 0), "INT1F");
            Bit((0xFF0 * 8 + 3), "INT1IE");
            Bit((0xFF0 * 8 + 0), "INT1IF");
            Bit((0xFF0 * 8 + 6), "INT1IP");
            Bit((0xFF0 * 8 + 6), "INT1P");
            Bit((0xF81 * 8 + 2), "INT2");
            Bit((0xFF0 * 8 + 4), "INT2E");
            Bit((0xFF0 * 8 + 1), "INT2F");
            Bit((0xFF0 * 8 + 4), "INT2IE");
            Bit((0xFF0 * 8 + 1), "INT2IF");
            Bit((0xFF0 * 8 + 7), "INT2IP");
            Bit((0xFF0 * 8 + 7), "INT2P");
            Bit((0xF81 * 8 + 3), "INT3");
            Bit((0xFF0 * 8 + 5), "INT3E");
            Bit((0xFF0 * 8 + 2), "INT3F");
            Bit((0xFF0 * 8 + 5), "INT3IE");
            Bit((0xFF0 * 8 + 2), "INT3IF");
            Bit((0xFF1 * 8 + 1), "INT3IP");
            Bit((0xFF1 * 8 + 1), "INT3P");
            Bit((0xFF1 * 8 + 6), "INTEDG0");
            Bit((0xFF1 * 8 + 5), "INTEDG1");
            Bit((0xFF1 * 8 + 4), "INTEDG2");
            Bit((0xFF1 * 8 + 3), "INTEDG3");
            Bit((0xF9B * 8 + 7), "INTSRC");
            Bit((0xFD3 * 8 + 2), "IOFS");
            Bit((0xFD0 * 8 + 7), "IPEN");
            Bit((0xFD3 * 8 + 4), "IRCF0");
            Bit((0xFD3 * 8 + 5), "IRCF1");
            Bit((0xFD3 * 8 + 6), "IRCF2");
            Bit((0xF55 * 8 + 0), "IRNG0");
            Bit((0xF55 * 8 + 1), "IRNG1");
            Bit((0xF55 * 8 + 2), "ITRIM0");
            Bit((0xF55 * 8 + 3), "ITRIM1");
            Bit((0xF55 * 8 + 4), "ITRIM2");
            Bit((0xF55 * 8 + 5), "ITRIM3");
            Bit((0xF55 * 8 + 6), "ITRIM4");
            Bit((0xF55 * 8 + 7), "ITRIM5");
            Bit((0xF81 * 8 + 4), "KBI0");
            Bit((0xF81 * 8 + 5), "KBI1");
            Bit((0xF81 * 8 + 6), "KBI2");
            Bit((0xF81 * 8 + 7), "KBI3");
            Bit((0xF89 * 8 + 0), "LA0");
            Bit((0xF89 * 8 + 1), "LA1");
            Bit((0xF89 * 8 + 2), "LA2");
            Bit((0xF89 * 8 + 3), "LA3");
            Bit((0xF89 * 8 + 4), "LA4");
            Bit((0xF89 * 8 + 5), "LA5");
            Bit((0xF89 * 8 + 6), "LA6");
            Bit((0xF89 * 8 + 7), "LA7");
            Bit((0xF89 * 8 + 0), "LATA0");
            Bit((0xF89 * 8 + 1), "LATA1");
            Bit((0xF89 * 8 + 2), "LATA2");
            Bit((0xF89 * 8 + 3), "LATA3");
            Bit((0xF89 * 8 + 4), "LATA4");
            Bit((0xF89 * 8 + 5), "LATA5");
            Bit((0xF89 * 8 + 6), "LATA6");
            Bit((0xF89 * 8 + 7), "LATA7");
            Bit((0xF8A * 8 + 0), "LATB0");
            Bit((0xF8A * 8 + 1), "LATB1");
            Bit((0xF8A * 8 + 2), "LATB2");
            Bit((0xF8A * 8 + 3), "LATB3");
            Bit((0xF8A * 8 + 4), "LATB4");
            Bit((0xF8A * 8 + 5), "LATB5");
            Bit((0xF8A * 8 + 6), "LATB6");
            Bit((0xF8A * 8 + 7), "LATB7");
            Bit((0xF8B * 8 + 0), "LATC0");
            Bit((0xF8B * 8 + 1), "LATC1");
            Bit((0xF8B * 8 + 2), "LATC2");
            Bit((0xF8B * 8 + 3), "LATC3");
            Bit((0xF8B * 8 + 4), "LATC4");
            Bit((0xF8B * 8 + 5), "LATC5");
            Bit((0xF8B * 8 + 6), "LATC6");
            Bit((0xF8B * 8 + 7), "LATC7");
            Bit((0xF8C * 8 + 0), "LATD0");
            Bit((0xF8C * 8 + 1), "LATD1");
            Bit((0xF8C * 8 + 2), "LATD2");
            Bit((0xF8C * 8 + 3), "LATD3");
            Bit((0xF8C * 8 + 4), "LATD4");
            Bit((0xF8C * 8 + 5), "LATD5");
            Bit((0xF8C * 8 + 6), "LATD6");
            Bit((0xF8C * 8 + 7), "LATD7");
            Bit((0xF8D * 8 + 0), "LATE0");
            Bit((0xF8D * 8 + 1), "LATE1");
            Bit((0xF8D * 8 + 3), "LATE3");
            Bit((0xF8D * 8 + 4), "LATE4");
            Bit((0xF8D * 8 + 5), "LATE5");
            Bit((0xF8D * 8 + 6), "LATE6");
            Bit((0xF8D * 8 + 7), "LATE7");
            Bit((0xF8E * 8 + 1), "LATF1");
            Bit((0xF8E * 8 + 2), "LATF2");
            Bit((0xF8E * 8 + 3), "LATF3");
            Bit((0xF8E * 8 + 4), "LATF4");
            Bit((0xF8E * 8 + 5), "LATF5");
            Bit((0xF8E * 8 + 6), "LATF6");
            Bit((0xF8E * 8 + 7), "LATF7");
            Bit((0xF8F * 8 + 0), "LATG0");
            Bit((0xF8F * 8 + 1), "LATG1");
            Bit((0xF8F * 8 + 2), "LATG2");
            Bit((0xF8F * 8 + 3), "LATG3");
            Bit((0xF8F * 8 + 4), "LATG4");
            Bit((0xF8A * 8 + 0), "LB0");
            Bit((0xF8A * 8 + 1), "LB1");
            Bit((0xF8A * 8 + 2), "LB2");
            Bit((0xF8A * 8 + 3), "LB3");
            Bit((0xF8A * 8 + 4), "LB4");
            Bit((0xF8A * 8 + 5), "LB5");
            Bit((0xF8A * 8 + 6), "LB6");
            Bit((0xF8A * 8 + 7), "LB7");
            Bit((0xF8B * 8 + 0), "LC0");
            Bit((0xF8B * 8 + 1), "LC1");
            Bit((0xF8B * 8 + 2), "LC2");
            Bit((0xF8B * 8 + 3), "LC3");
            Bit((0xF8B * 8 + 4), "LC4");
            Bit((0xF8B * 8 + 5), "LC5");
            Bit((0xF8B * 8 + 6), "LC6");
            Bit((0xF8B * 8 + 7), "LC7");
            Bit((0xFAA * 8 + 5), "LCDA");
            Bit((0xF86 * 8 + 0), "LCDBIAS0");
            Bit((0xF84 * 8 + 0), "LCDBIAS1");
            Bit((0xF84 * 8 + 1), "LCDBIAS2");
            Bit((0xFA8 * 8 + 2), "LCDCS0");
            Bit((0xFA8 * 8 + 3), "LCDCS1");
            Bit((0xFA8 * 8 + 7), "LCDEN");
            Bit((0xFA3 * 8 + 6), "LCDIE");
            Bit((0xFA4 * 8 + 6), "LCDIF");
            Bit((0xFA5 * 8 + 6), "LCDIP");
            Bit((0xFAA * 8 + 0), "LCDPS0");
            Bit((0xFAA * 8 + 1), "LCDPS1");
            Bit((0xFAA * 8 + 2), "LCDPS2");
            Bit((0xFAA * 8 + 3), "LCDPS3");
            Bit((0xFA8 * 8 + 6), "LCDSLPEN");
            Bit((0xFA8 * 8 + 5), "LCDWERR");
            Bit((0xF8C * 8 + 0), "LD0");
            Bit((0xF8C * 8 + 1), "LD1");
            Bit((0xF8C * 8 + 2), "LD2");
            Bit((0xF8C * 8 + 3), "LD3");
            Bit((0xF8C * 8 + 4), "LD4");
            Bit((0xF8C * 8 + 5), "LD5");
            Bit((0xF8C * 8 + 6), "LD6");
            Bit((0xF8C * 8 + 7), "LD7");
            Bit((0xF8D * 8 + 0), "LE0");
            Bit((0xF8D * 8 + 1), "LE1");
            Bit((0xF8D * 8 + 3), "LE3");
            Bit((0xF8D * 8 + 4), "LE4");
            Bit((0xF8D * 8 + 5), "LE5");
            Bit((0xF8D * 8 + 6), "LE6");
            Bit((0xF8D * 8 + 7), "LE7");
            Bit((0xF8E * 8 + 1), "LF1");
            Bit((0xF8E * 8 + 2), "LF2");
            Bit((0xF8E * 8 + 3), "LF3");
            Bit((0xF8E * 8 + 4), "LF4");
            Bit((0xF8E * 8 + 5), "LF5");
            Bit((0xF8E * 8 + 6), "LF6");
            Bit((0xF8E * 8 + 7), "LF7");
            Bit((0xF8F * 8 + 0), "LG0");
            Bit((0xF8F * 8 + 1), "LG1");
            Bit((0xF8F * 8 + 2), "LG2");
            Bit((0xF8F * 8 + 3), "LG3");
            Bit((0xF8F * 8 + 4), "LG4");
            Bit((0xFA8 * 8 + 0), "LMUX0");
            Bit((0xFA8 * 8 + 1), "LMUX1");
            Bit((0xFAA * 8 + 0), "LP0");
            Bit((0xFAA * 8 + 1), "LP1");
            Bit((0xFAA * 8 + 2), "LP2");
            Bit((0xFAA * 8 + 3), "LP3");
            Bit((0xFA0 * 8 + 2), "LVDIE");
            Bit((0xFA1 * 8 + 2), "LVDIF");
            Bit((0xF80 * 8 + 5), "LVDIN");
            Bit((0xFA2 * 8 + 2), "LVDIP");
            Bit((0xFD2 * 8 + 2), "MODE13");
            Bit((0xFC8 * 8 + 0), "MSK0");
            Bit((0xFC8 * 8 + 0), "MSK01");
            Bit((0xFC8 * 8 + 1), "MSK1");
            Bit((0xFC8 * 8 + 1), "MSK11");
            Bit((0xFC8 * 8 + 2), "MSK2");
            Bit((0xFC8 * 8 + 2), "MSK21");
            Bit((0xFC8 * 8 + 3), "MSK3");
            Bit((0xFC8 * 8 + 3), "MSK31");
            Bit((0xFC8 * 8 + 4), "MSK4");
            Bit((0xFC8 * 8 + 4), "MSK41");
            Bit((0xFC8 * 8 + 5), "MSK5");
            Bit((0xFC8 * 8 + 5), "MSK51");
            Bit((0xFC8 * 8 + 6), "MSK6");
            Bit((0xFC8 * 8 + 6), "MSK61");
            Bit((0xFC8 * 8 + 7), "MSK7");
            Bit((0xFC8 * 8 + 7), "MSK71");
            Bit((0xFD8 * 8 + 4), "NEGATIVE");
            Bit((0xFC7 * 8 + 5), "NOT_A");
            Bit((0xFC7 * 8 + 5), "NOT_ADDRESS");
            Bit((0xFD0 * 8 + 0), "NOT_BOR");
            Bit((0xFD0 * 8 + 5), "NOT_CM");
            Bit((0xFC2 * 8 + 1), "NOT_DONE");
            Bit((0xFD0 * 8 + 2), "NOT_PD");
            Bit((0xFD0 * 8 + 1), "NOT_POR");
            Bit((0xFF1 * 8 + 7), "NOT_RBPU");
            Bit((0xF60 * 8 + 6), "NOT_RC8");
            Bit((0xFD0 * 8 + 4), "NOT_RI");
            Bit((0xFCD * 8 + 2), "NOT_T1SYNC");
            Bit((0xFB1 * 8 + 2), "NOT_T3SYNC");
            Bit((0xFD0 * 8 + 3), "NOT_TO");
            Bit((0xF61 * 8 + 6), "NOT_TX8");
            Bit((0xFC7 * 8 + 2), "NOT_W");
            Bit((0xFC7 * 8 + 2), "NOT_WRITE");
            Bit((0xFAB * 8 + 1), "OERR");
            Bit((0xFAB * 8 + 1), "OERR1");
            Bit((0xF60 * 8 + 1), "OERR2");
            Bit((0xF80 * 8 + 7), "OSC1");
            Bit((0xF80 * 8 + 6), "OSC2");
            Bit((0xFA0 * 8 + 7), "OSCFIE");
            Bit((0xFA1 * 8 + 7), "OSCFIF");
            Bit((0xFA2 * 8 + 7), "OSCFIP");
            Bit((0xFD3 * 8 + 3), "OSTS");
            Bit((0xFD8 * 8 + 3), "OV");
            Bit((0xFD8 * 8 + 3), "OVERFLOW");
            Bit((0xF82 * 8 + 2), "PA1");
            Bit((0xF82 * 8 + 1), "PA2");
            Bit((0xF84 * 8 + 7), "PA2E");
            Bit((0xF84 * 8 + 6), "PB1E");
            Bit((0xF84 * 8 + 4), "PB3E");
            Bit((0xF84 * 8 + 5), "PC1E");
            Bit((0xF84 * 8 + 1), "PC2");
            Bit((0xF84 * 8 + 3), "PC3E");
            Bit((0xFC1 * 8 + 0), "PCFG0");
            Bit((0xFC1 * 8 + 1), "PCFG1");
            Bit((0xFC1 * 8 + 2), "PCFG2");
            Bit((0xFC1 * 8 + 3), "PCFG3");
            Bit((0xFD0 * 8 + 2), "PD");
            Bit((0xF84 * 8 + 0), "PD2");
            Bit((0xFF2 * 8 + 6), "PEIE");
            Bit((0xFF2 * 8 + 6), "PEIE_GIEL");
            Bit((0xFC5 * 8 + 2), "PEN");
            Bit((0xFC5 * 8 + 2), "PEN1");
            Bit((0xF81 * 8 + 6), "PGC");
            Bit((0xF81 * 8 + 7), "PGD");
            Bit((0xF9B * 8 + 6), "PLLEN");
            Bit((0xFD0 * 8 + 1), "POR");
            Bit((0xFD5 * 8 + 3), "PSA");
            Bit((0xF80 * 8 + 0), "RA0");
            Bit((0xF80 * 8 + 1), "RA1");
            Bit((0xF80 * 8 + 2), "RA2");
            Bit((0xF80 * 8 + 3), "RA3");
            Bit((0xF80 * 8 + 4), "RA4");
            Bit((0xF80 * 8 + 5), "RA5");
            Bit((0xF80 * 8 + 6), "RA6");
            Bit((0xF80 * 8 + 7), "RA7");
            Bit((0xF81 * 8 + 0), "RB0");
            Bit((0xF81 * 8 + 1), "RB1");
            Bit((0xF81 * 8 + 2), "RB2");
            Bit((0xF81 * 8 + 3), "RB3");
            Bit((0xF81 * 8 + 4), "RB4");
            Bit((0xF81 * 8 + 5), "RB5");
            Bit((0xF81 * 8 + 6), "RB6");
            Bit((0xF81 * 8 + 7), "RB7");
            Bit((0xFF2 * 8 + 3), "RBIE");
            Bit((0xFF2 * 8 + 0), "RBIF");
            Bit((0xFF1 * 8 + 0), "RBIP");
            Bit((0xFF1 * 8 + 7), "RBPU");
            Bit((0xF82 * 8 + 0), "RC0");
            Bit((0xF82 * 8 + 1), "RC1");
            Bit((0xF9D * 8 + 5), "RC1IE");
            Bit((0xF9E * 8 + 5), "RC1IF");
            Bit((0xF9F * 8 + 5), "RC1IP");
            Bit((0xF82 * 8 + 2), "RC2");
            Bit((0xFA3 * 8 + 5), "RC2IE");
            Bit((0xFA4 * 8 + 5), "RC2IF");
            Bit((0xFA5 * 8 + 5), "RC2IP");
            Bit((0xF82 * 8 + 3), "RC3");
            Bit((0xF82 * 8 + 4), "RC4");
            Bit((0xF82 * 8 + 5), "RC5");
            Bit((0xF82 * 8 + 6), "RC6");
            Bit((0xF82 * 8 + 7), "RC7");
            Bit((0xFAB * 8 + 6), "RC8_9");
            Bit((0xF60 * 8 + 6), "RC8_92");
            Bit((0xFAB * 8 + 6), "RC9");
            Bit((0xF60 * 8 + 6), "RC92");
            Bit((0xFAB * 8 + 0), "RCD8");
            Bit((0xF60 * 8 + 0), "RCD82");
            Bit((0xFC5 * 8 + 3), "RCEN");
            Bit((0xFC5 * 8 + 3), "RCEN1");
            Bit((0xF7E * 8 + 6), "RCIDL");
            Bit((0xF7E * 8 + 6), "RCIDL1");
            Bit((0xF9D * 8 + 5), "RCIE");
            Bit((0xF9E * 8 + 5), "RCIF");
            Bit((0xF9F * 8 + 5), "RCIP");
            Bit((0xF7E * 8 + 6), "RCMT");
            Bit((0xF7E * 8 + 6), "RCMT1");
            Bit((0xF83 * 8 + 0), "RD0");
            Bit((0xF83 * 8 + 1), "RD1");
            Bit((0xFCD * 8 + 7), "RD16");
            Bit((0xFB1 * 8 + 7), "RD163");
            Bit((0xF83 * 8 + 2), "RD2");
            Bit((0xF83 * 8 + 3), "RD3");
            Bit((0xF83 * 8 + 4), "RD4");
            Bit((0xF83 * 8 + 5), "RD5");
            Bit((0xF83 * 8 + 6), "RD6");
            Bit((0xF83 * 8 + 7), "RD7");
            Bit((0xF84 * 8 + 0), "RDE");
            Bit((0xF86 * 8 + 7), "RDPU");
            Bit((0xF84 * 8 + 0), "RE0");
            Bit((0xF84 * 8 + 1), "RE1");
            Bit((0xF84 * 8 + 3), "RE3");
            Bit((0xF84 * 8 + 4), "RE4");
            Bit((0xF84 * 8 + 5), "RE5");
            Bit((0xF84 * 8 + 6), "RE6");
            Bit((0xF84 * 8 + 7), "RE7");
            Bit((0xFC7 * 8 + 2), "READ_WRITE");
            Bit((0xFD1 * 8 + 7), "REGSLP");
            Bit((0xF86 * 8 + 6), "REPU");
            Bit((0xF85 * 8 + 1), "RF1");
            Bit((0xF85 * 8 + 2), "RF2");
            Bit((0xF85 * 8 + 3), "RF3");
            Bit((0xF85 * 8 + 4), "RF4");
            Bit((0xF85 * 8 + 5), "RF5");
            Bit((0xF85 * 8 + 6), "RF6");
            Bit((0xF85 * 8 + 7), "RF7");
            Bit((0xF86 * 8 + 0), "RG0");
            Bit((0xF86 * 8 + 1), "RG1");
            Bit((0xF86 * 8 + 2), "RG2");
            Bit((0xF86 * 8 + 3), "RG3");
            Bit((0xF86 * 8 + 4), "RG4");
            Bit((0xF86 * 8 + 5), "RG5");
            Bit((0xF86 * 8 + 6), "RG6");
            Bit((0xF86 * 8 + 7), "RG7");
            Bit((0xFD0 * 8 + 4), "RI");
            Bit((0xF86 * 8 + 5), "RJPU");
            Bit((0xFC5 * 8 + 1), "RSEN");
            Bit((0xFC5 * 8 + 1), "RSEN1");
            Bit((0xF86 * 8 + 4), "RTCC");
            Bit((0xFA3 * 8 + 0), "RTCCIE");
            Bit((0xFA4 * 8 + 0), "RTCCIF");
            Bit((0xFA5 * 8 + 0), "RTCCIP");
            Bit((0xF5F * 8 + 7), "RTCEN");
            Bit((0xF5F * 8 + 2), "RTCOE");
            Bit((0xF5F * 8 + 0), "RTCPTR0");
            Bit((0xF5F * 8 + 1), "RTCPTR1");
            Bit((0xF5F * 8 + 4), "RTCSYNC");
            Bit((0xF5F * 8 + 5), "RTCWREN");
            Bit((0xF54 * 8 + 1), "RTSECSEL0");
            Bit((0xF54 * 8 + 2), "RTSECSEL1");
            Bit((0xFC7 * 8 + 2), "RW");
            Bit((0xFC7 * 8 + 2), "RW1");
            Bit((0xF82 * 8 + 7), "RX1");
            Bit((0xF86 * 8 + 2), "RX2");
            Bit((0xFAB * 8 + 6), "RX9");
            Bit((0xFAB * 8 + 6), "RX91");
            Bit((0xF60 * 8 + 6), "RX92");
            Bit((0xFAB * 8 + 0), "RX9D");
            Bit((0xFAB * 8 + 0), "RX9D1");
            Bit((0xF60 * 8 + 0), "RX9D2");
            Bit((0xFA3 * 8 + 0), "RXB0IE");
            Bit((0xFA3 * 8 + 1), "RXB1IE");
            Bit((0xFA3 * 8 + 1), "RXBNIE");
            Bit((0xFA4 * 8 + 1), "RXBNIF");
            Bit((0xFA5 * 8 + 1), "RXBNIP");
            Bit((0xF7E * 8 + 5), "RXCKP");
            Bit((0xF7E * 8 + 5), "RXDTP");
            Bit((0xF7E * 8 + 5), "RXDTP1");
            Bit((0xFC7 * 8 + 2), "R_NOT_W");
            Bit((0xFC7 * 8 + 2), "R_W");
            Bit((0xFC7 * 8 + 2), "R_nW");
            Bit((0xFBB * 8 + 0), "S00C0");
            Bit((0xF6C * 8 + 0), "S00C1");
            Bit((0xF72 * 8 + 0), "S00C2");
            Bit((0xF78 * 8 + 0), "S00C3");
            Bit((0xFBB * 8 + 1), "S01C0");
            Bit((0xF6C * 8 + 1), "S01C1");
            Bit((0xF72 * 8 + 1), "S01C2");
            Bit((0xF78 * 8 + 1), "S01C3");
            Bit((0xFBB * 8 + 2), "S02C0");
            Bit((0xF6C * 8 + 2), "S02C1");
            Bit((0xF72 * 8 + 2), "S02C2");
            Bit((0xF78 * 8 + 2), "S02C3");
            Bit((0xFBB * 8 + 3), "S03C0");
            Bit((0xF6C * 8 + 3), "S03C1");
            Bit((0xF72 * 8 + 3), "S03C2");
            Bit((0xF78 * 8 + 3), "S03C3");
            Bit((0xFBB * 8 + 4), "S04C0");
            Bit((0xF6C * 8 + 4), "S04C1");
            Bit((0xF72 * 8 + 4), "S04C2");
            Bit((0xF78 * 8 + 4), "S04C3");
            Bit((0xFBB * 8 + 5), "S05C0");
            Bit((0xF6C * 8 + 5), "S05C1");
            Bit((0xF72 * 8 + 5), "S05C2");
            Bit((0xF78 * 8 + 5), "S05C3");
            Bit((0xFBB * 8 + 6), "S06C0");
            Bit((0xF6C * 8 + 6), "S06C1");
            Bit((0xF72 * 8 + 6), "S06C2");
            Bit((0xF78 * 8 + 6), "S06C3");
            Bit((0xFBB * 8 + 7), "S07C0");
            Bit((0xF6C * 8 + 7), "S07C1");
            Bit((0xF72 * 8 + 7), "S07C2");
            Bit((0xF78 * 8 + 7), "S07C3");
            Bit((0xFBC * 8 + 0), "S08C0");
            Bit((0xF6D * 8 + 0), "S08C1");
            Bit((0xF73 * 8 + 0), "S08C2");
            Bit((0xF79 * 8 + 0), "S08C3");
            Bit((0xFBC * 8 + 1), "S09C0");
            Bit((0xF6D * 8 + 1), "S09C1");
            Bit((0xF73 * 8 + 1), "S09C2");
            Bit((0xF79 * 8 + 1), "S09C3");
            Bit((0xFBB * 8 + 0), "S0C0");
            Bit((0xF6C * 8 + 0), "S0C1");
            Bit((0xF72 * 8 + 0), "S0C2");
            Bit((0xF78 * 8 + 0), "S0C3");
            Bit((0xFBC * 8 + 2), "S10C0");
            Bit((0xF6D * 8 + 2), "S10C1");
            Bit((0xF73 * 8 + 2), "S10C2");
            Bit((0xF79 * 8 + 2), "S10C3");
            Bit((0xFBC * 8 + 3), "S11C0");
            Bit((0xF6D * 8 + 3), "S11C1");
            Bit((0xF73 * 8 + 3), "S11C2");
            Bit((0xF79 * 8 + 3), "S11C3");
            Bit((0xFBC * 8 + 4), "S12C0");
            Bit((0xF6D * 8 + 4), "S12C1");
            Bit((0xF73 * 8 + 4), "S12C2");
            Bit((0xF79 * 8 + 4), "S12C3");
            Bit((0xFBC * 8 + 5), "S13C0");
            Bit((0xF6D * 8 + 5), "S13C1");
            Bit((0xF73 * 8 + 5), "S13C2");
            Bit((0xF79 * 8 + 5), "S13C3");
            Bit((0xFBC * 8 + 6), "S14C0");
            Bit((0xF6D * 8 + 6), "S14C1");
            Bit((0xF73 * 8 + 6), "S14C2");
            Bit((0xF79 * 8 + 6), "S14C3");
            Bit((0xFBC * 8 + 7), "S15C0");
            Bit((0xF6D * 8 + 7), "S15C1");
            Bit((0xF73 * 8 + 7), "S15C2");
            Bit((0xF79 * 8 + 7), "S15C3");
            Bit((0xFBD * 8 + 0), "S16C0");
            Bit((0xF6E * 8 + 0), "S16C1");
            Bit((0xF74 * 8 + 0), "S16C2");
            Bit((0xF7A * 8 + 0), "S16C3");
            Bit((0xFBD * 8 + 1), "S17C0");
            Bit((0xF6E * 8 + 1), "S17C1");
            Bit((0xF74 * 8 + 1), "S17C2");
            Bit((0xF7A * 8 + 1), "S17C3");
            Bit((0xFBD * 8 + 2), "S18C0");
            Bit((0xF6E * 8 + 2), "S18C1");
            Bit((0xF74 * 8 + 2), "S18C2");
            Bit((0xF7A * 8 + 2), "S18C3");
            Bit((0xFBD * 8 + 3), "S19C0");
            Bit((0xF6E * 8 + 3), "S19C1");
            Bit((0xF74 * 8 + 3), "S19C2");
            Bit((0xF7A * 8 + 3), "S19C3");
            Bit((0xFBB * 8 + 1), "S1C0");
            Bit((0xF6C * 8 + 1), "S1C1");
            Bit((0xF72 * 8 + 1), "S1C2");
            Bit((0xF78 * 8 + 1), "S1C3");
            Bit((0xFBD * 8 + 4), "S20C0");
            Bit((0xF6E * 8 + 4), "S20C1");
            Bit((0xF74 * 8 + 4), "S20C2");
            Bit((0xF7A * 8 + 4), "S20C3");
            Bit((0xFBD * 8 + 5), "S21C0");
            Bit((0xF6E * 8 + 5), "S21C1");
            Bit((0xF74 * 8 + 5), "S21C2");
            Bit((0xF7A * 8 + 5), "S21C3");
            Bit((0xFBD * 8 + 6), "S22C0");
            Bit((0xF6E * 8 + 6), "S22C1");
            Bit((0xF74 * 8 + 6), "S22C2");
            Bit((0xF7A * 8 + 6), "S22C3");
            Bit((0xFBD * 8 + 7), "S23C0");
            Bit((0xF6E * 8 + 7), "S23C1");
            Bit((0xF74 * 8 + 7), "S23C2");
            Bit((0xF7A * 8 + 7), "S23C3");
            Bit((0xFBE * 8 + 0), "S24C0");
            Bit((0xF6F * 8 + 0), "S24C1");
            Bit((0xF75 * 8 + 0), "S24C2");
            Bit((0xF7B * 8 + 0), "S24C3");
            Bit((0xFBE * 8 + 1), "S25C0");
            Bit((0xF6F * 8 + 1), "S25C1");
            Bit((0xF75 * 8 + 1), "S25C2");
            Bit((0xF7B * 8 + 1), "S25C3");
            Bit((0xFBE * 8 + 2), "S26C0");
            Bit((0xF6F * 8 + 2), "S26C1");
            Bit((0xF75 * 8 + 2), "S26C2");
            Bit((0xF7B * 8 + 2), "S26C3");
            Bit((0xFBE * 8 + 3), "S27C0");
            Bit((0xF6F * 8 + 3), "S27C1");
            Bit((0xF75 * 8 + 3), "S27C2");
            Bit((0xF7B * 8 + 3), "S27C3");
            Bit((0xFBE * 8 + 4), "S28C0");
            Bit((0xF6F * 8 + 4), "S28C1");
            Bit((0xF75 * 8 + 4), "S28C2");
            Bit((0xF7B * 8 + 4), "S28C3");
            Bit((0xFBE * 8 + 5), "S29C0");
            Bit((0xF6F * 8 + 5), "S29C1");
            Bit((0xF75 * 8 + 5), "S29C2");
            Bit((0xF7B * 8 + 5), "S29C3");
            Bit((0xFBB * 8 + 2), "S2C0");
            Bit((0xF6C * 8 + 2), "S2C1");
            Bit((0xF72 * 8 + 2), "S2C2");
            Bit((0xF78 * 8 + 2), "S2C3");
            Bit((0xFBE * 8 + 6), "S30C0");
            Bit((0xF6F * 8 + 6), "S30C1");
            Bit((0xF75 * 8 + 6), "S30C2");
            Bit((0xF7B * 8 + 6), "S30C3");
            Bit((0xFBE * 8 + 7), "S31C0");
            Bit((0xF6F * 8 + 7), "S31C1");
            Bit((0xF75 * 8 + 7), "S31C2");
            Bit((0xF7B * 8 + 7), "S31C3");
            Bit((0xFBF * 8 + 0), "S32C0");
            Bit((0xF70 * 8 + 0), "S32C1");
            Bit((0xF76 * 8 + 0), "S32C2");
            Bit((0xF7C * 8 + 0), "S32C3");
            Bit((0xFBF * 8 + 1), "S33C0");
            Bit((0xFBF * 8 + 2), "S34C0");
            Bit((0xFBF * 8 + 3), "S35C0");
            Bit((0xFBF * 8 + 4), "S36C0");
            Bit((0xFBF * 8 + 5), "S37C0");
            Bit((0xFBF * 8 + 6), "S38C0");
            Bit((0xFBF * 8 + 7), "S39C0");
            Bit((0xFBB * 8 + 3), "S3C0");
            Bit((0xF6C * 8 + 3), "S3C1");
            Bit((0xF72 * 8 + 3), "S3C2");
            Bit((0xF78 * 8 + 3), "S3C3");
            Bit((0xFBB * 8 + 4), "S4C0");
            Bit((0xF6C * 8 + 4), "S4C1");
            Bit((0xF72 * 8 + 4), "S4C2");
            Bit((0xF78 * 8 + 4), "S4C3");
            Bit((0xFBB * 8 + 5), "S5C0");
            Bit((0xF6C * 8 + 5), "S5C1");
            Bit((0xF72 * 8 + 5), "S5C2");
            Bit((0xF78 * 8 + 5), "S5C3");
            Bit((0xFBB * 8 + 6), "S6C0");
            Bit((0xF6C * 8 + 6), "S6C1");
            Bit((0xF72 * 8 + 6), "S6C2");
            Bit((0xF78 * 8 + 6), "S6C3");
            Bit((0xFBB * 8 + 7), "S7C0");
            Bit((0xF6C * 8 + 7), "S7C1");
            Bit((0xF72 * 8 + 7), "S7C2");
            Bit((0xF78 * 8 + 7), "S7C3");
            Bit((0xFBC * 8 + 0), "S8C0");
            Bit((0xF6D * 8 + 0), "S8C1");
            Bit((0xF73 * 8 + 0), "S8C2");
            Bit((0xF79 * 8 + 0), "S8C3");
            Bit((0xFBC * 8 + 1), "S9C0");
            Bit((0xF6D * 8 + 1), "S9C1");
            Bit((0xF73 * 8 + 1), "S9C2");
            Bit((0xF79 * 8 + 1), "S9C3");
            Bit((0xF82 * 8 + 3), "SCK");
            Bit((0xF7E * 8 + 4), "SCKP");
            Bit((0xF7E * 8 + 4), "SCKP1");
            Bit((0xF82 * 8 + 3), "SCL");
            Bit((0xFD3 * 8 + 0), "SCS0");
            Bit((0xFD3 * 8 + 1), "SCS1");
            Bit((0xF82 * 8 + 4), "SDA");
            Bit((0xF82 * 8 + 4), "SDI");
            Bit((0xF82 * 8 + 5), "SDO");
            Bit((0xFA9 * 8 + 0), "SE0");
            Bit((0xFA9 * 8 + 0), "SE00");
            Bit((0xFA9 * 8 + 1), "SE01");
            Bit((0xFA9 * 8 + 2), "SE02");
            Bit((0xFA9 * 8 + 3), "SE03");
            Bit((0xFA9 * 8 + 4), "SE04");
            Bit((0xFA9 * 8 + 5), "SE05");
            Bit((0xFA9 * 8 + 6), "SE06");
            Bit((0xFA9 * 8 + 7), "SE07");
            Bit((0xFB6 * 8 + 0), "SE08");
            Bit((0xFB6 * 8 + 1), "SE09");
            Bit((0xFA9 * 8 + 1), "SE1");
            Bit((0xFB6 * 8 + 2), "SE10");
            Bit((0xFB6 * 8 + 3), "SE11");
            Bit((0xFB6 * 8 + 4), "SE12");
            Bit((0xFB6 * 8 + 5), "SE13");
            Bit((0xFB6 * 8 + 6), "SE14");
            Bit((0xFB6 * 8 + 7), "SE15");
            Bit((0xFB7 * 8 + 0), "SE16");
            Bit((0xFB7 * 8 + 1), "SE17");
            Bit((0xFB7 * 8 + 2), "SE18");
            Bit((0xFB7 * 8 + 3), "SE19");
            Bit((0xFA9 * 8 + 2), "SE2");
            Bit((0xFB7 * 8 + 4), "SE20");
            Bit((0xFB7 * 8 + 5), "SE21");
            Bit((0xFB7 * 8 + 6), "SE22");
            Bit((0xFB7 * 8 + 7), "SE23");
            Bit((0xFB8 * 8 + 0), "SE24");
            Bit((0xFB8 * 8 + 1), "SE25");
            Bit((0xFB8 * 8 + 2), "SE26");
            Bit((0xFB8 * 8 + 3), "SE27");
            Bit((0xFB8 * 8 + 4), "SE28");
            Bit((0xFB8 * 8 + 5), "SE29");
            Bit((0xFA9 * 8 + 3), "SE3");
            Bit((0xFB8 * 8 + 6), "SE30");
            Bit((0xFB8 * 8 + 7), "SE31");
            Bit((0xFB9 * 8 + 0), "SE32");
            Bit((0xFA9 * 8 + 4), "SE4");
            Bit((0xFA9 * 8 + 5), "SE5");
            Bit((0xFA9 * 8 + 6), "SE6");
            Bit((0xFA9 * 8 + 7), "SE7");
            Bit((0xFB6 * 8 + 0), "SE8");
            Bit((0xFB6 * 8 + 1), "SE9");
            Bit((0xF83 * 8 + 0), "SEG0");
            Bit((0xF78 * 8 + 0), "SEG00COM3");
            Bit((0xF78 * 8 + 1), "SEG01COM3");
            Bit((0xF78 * 8 + 2), "SEG02COM3");
            Bit((0xF78 * 8 + 3), "SEG03COM3");
            Bit((0xF78 * 8 + 4), "SEG04COM3");
            Bit((0xF78 * 8 + 5), "SEG05COM3");
            Bit((0xF78 * 8 + 6), "SEG06COM3");
            Bit((0xF78 * 8 + 7), "SEG07COM3");
            Bit((0xFBB * 8 + 0), "SEG0COM0");
            Bit((0xF6C * 8 + 0), "SEG0COM1");
            Bit((0xF72 * 8 + 0), "SEG0COM2");
            Bit((0xF83 * 8 + 1), "SEG1");
            Bit((0xF81 * 8 + 3), "SEG10");
            Bit((0xFBC * 8 + 2), "SEG10COM0");
            Bit((0xF6D * 8 + 2), "SEG10COM1");
            Bit((0xF73 * 8 + 2), "SEG10COM2");
            Bit((0xF79 * 8 + 2), "SEG10COM3");
            Bit((0xF81 * 8 + 4), "SEG11");
            Bit((0xFBC * 8 + 3), "SEG11COM0");
            Bit((0xF6D * 8 + 3), "SEG11COM1");
            Bit((0xF73 * 8 + 3), "SEG11COM2");
            Bit((0xF79 * 8 + 3), "SEG11COM3");
            Bit((0xF82 * 8 + 5), "SEG12");
            Bit((0xFBC * 8 + 4), "SEG12COM0");
            Bit((0xF6D * 8 + 4), "SEG12COM1");
            Bit((0xF73 * 8 + 4), "SEG12COM2");
            Bit((0xF79 * 8 + 4), "SEG12COM3");
            Bit((0xF82 * 8 + 2), "SEG13");
            Bit((0xFBC * 8 + 5), "SEG13COM0");
            Bit((0xF6D * 8 + 5), "SEG13COM1");
            Bit((0xF73 * 8 + 5), "SEG13COM2");
            Bit((0xF79 * 8 + 5), "SEG13COM3");
            Bit((0xF80 * 8 + 4), "SEG14");
            Bit((0xFBC * 8 + 6), "SEG14COM0");
            Bit((0xF6D * 8 + 6), "SEG14COM1");
            Bit((0xF73 * 8 + 6), "SEG14COM2");
            Bit((0xF79 * 8 + 6), "SEG14COM3");
            Bit((0xF80 * 8 + 5), "SEG15");
            Bit((0xFBC * 8 + 7), "SEG15COM0");
            Bit((0xF6D * 8 + 7), "SEG15COM1");
            Bit((0xF73 * 8 + 7), "SEG15COM2");
            Bit((0xF79 * 8 + 7), "SEG15COM3");
            Bit((0xF82 * 8 + 4), "SEG16");
            Bit((0xFBD * 8 + 0), "SEG16COM0");
            Bit((0xF6E * 8 + 0), "SEG16COM1");
            Bit((0xF74 * 8 + 0), "SEG16COM2");
            Bit((0xF7A * 8 + 0), "SEG16COM3");
            Bit((0xF82 * 8 + 3), "SEG17");
            Bit((0xFBD * 8 + 1), "SEG17COM0");
            Bit((0xF6E * 8 + 1), "SEG17COM1");
            Bit((0xF74 * 8 + 1), "SEG17COM2");
            Bit((0xF7A * 8 + 1), "SEG17COM3");
            Bit((0xF80 * 8 + 1), "SEG18");
            Bit((0xFBD * 8 + 2), "SEG18COM0");
            Bit((0xF6E * 8 + 2), "SEG18COM1");
            Bit((0xF74 * 8 + 2), "SEG18COM2");
            Bit((0xF7A * 8 + 2), "SEG18COM3");
            Bit((0xF85 * 8 + 1), "SEG19");
            Bit((0xFBD * 8 + 3), "SEG19COM0");
            Bit((0xF6E * 8 + 3), "SEG19COM1");
            Bit((0xF74 * 8 + 3), "SEG19COM2");
            Bit((0xF7A * 8 + 3), "SEG19COM3");
            Bit((0xFBB * 8 + 1), "SEG1COM0");
            Bit((0xF6C * 8 + 1), "SEG1COM1");
            Bit((0xF72 * 8 + 1), "SEG1COM2");
            Bit((0xF83 * 8 + 2), "SEG2");
            Bit((0xF85 * 8 + 2), "SEG20");
            Bit((0xFBD * 8 + 4), "SEG20COM0");
            Bit((0xF6E * 8 + 4), "SEG20COM1");
            Bit((0xF74 * 8 + 4), "SEG20COM2");
            Bit((0xF7A * 8 + 4), "SEG20COM3");
            Bit((0xF85 * 8 + 3), "SEG21");
            Bit((0xFBD * 8 + 5), "SEG21COM0");
            Bit((0xF6E * 8 + 5), "SEG21COM1");
            Bit((0xF74 * 8 + 5), "SEG21COM2");
            Bit((0xF7A * 8 + 5), "SEG21COM3");
            Bit((0xF85 * 8 + 4), "SEG22");
            Bit((0xFBD * 8 + 6), "SEG22COM0");
            Bit((0xF6E * 8 + 6), "SEG22COM1");
            Bit((0xF74 * 8 + 6), "SEG22COM2");
            Bit((0xF7A * 8 + 6), "SEG22COM3");
            Bit((0xF85 * 8 + 5), "SEG23");
            Bit((0xFBD * 8 + 7), "SEG23COM0");
            Bit((0xF6E * 8 + 7), "SEG23COM1");
            Bit((0xF74 * 8 + 7), "SEG23COM2");
            Bit((0xF7A * 8 + 7), "SEG23COM3");
            Bit((0xF85 * 8 + 6), "SEG24");
            Bit((0xFBE * 8 + 0), "SEG24COM0");
            Bit((0xF6F * 8 + 0), "SEG24COM1");
            Bit((0xF75 * 8 + 0), "SEG24COM2");
            Bit((0xF7B * 8 + 0), "SEG24COM3");
            Bit((0xF85 * 8 + 7), "SEG25");
            Bit((0xFBE * 8 + 1), "SEG25COM0");
            Bit((0xF6F * 8 + 1), "SEG25COM1");
            Bit((0xF75 * 8 + 1), "SEG25COM2");
            Bit((0xF7B * 8 + 1), "SEG25COM3");
            Bit((0xF86 * 8 + 4), "SEG26");
            Bit((0xFBE * 8 + 2), "SEG26COM0");
            Bit((0xF6F * 8 + 2), "SEG26COM1");
            Bit((0xF75 * 8 + 2), "SEG26COM2");
            Bit((0xF7B * 8 + 2), "SEG26COM3");
            Bit((0xF82 * 8 + 6), "SEG27");
            Bit((0xFBE * 8 + 3), "SEG27COM0");
            Bit((0xF6F * 8 + 3), "SEG27COM1");
            Bit((0xF75 * 8 + 3), "SEG27COM2");
            Bit((0xF7B * 8 + 3), "SEG27COM3");
            Bit((0xF82 * 8 + 7), "SEG28");
            Bit((0xFBE * 8 + 4), "SEG28COM0");
            Bit((0xF6F * 8 + 4), "SEG28COM1");
            Bit((0xF75 * 8 + 4), "SEG28COM2");
            Bit((0xF7B * 8 + 4), "SEG28COM3");
            Bit((0xF81 * 8 + 5), "SEG29");
            Bit((0xFBE * 8 + 5), "SEG29COM0");
            Bit((0xF6F * 8 + 5), "SEG29COM1");
            Bit((0xF75 * 8 + 5), "SEG29COM2");
            Bit((0xF7B * 8 + 5), "SEG29COM3");
            Bit((0xFBB * 8 + 2), "SEG2COM0");
            Bit((0xF6C * 8 + 2), "SEG2COM1");
            Bit((0xF72 * 8 + 2), "SEG2COM2");
            Bit((0xF83 * 8 + 3), "SEG3");
            Bit((0xF81 * 8 + 0), "SEG30");
            Bit((0xFBE * 8 + 6), "SEG30COM0");
            Bit((0xF6F * 8 + 6), "SEG30COM1");
            Bit((0xF75 * 8 + 6), "SEG30COM2");
            Bit((0xF7B * 8 + 6), "SEG30COM3");
            Bit((0xF84 * 8 + 7), "SEG31");
            Bit((0xFBE * 8 + 7), "SEG31COM0");
            Bit((0xF6F * 8 + 7), "SEG31COM1");
            Bit((0xF75 * 8 + 7), "SEG31COM2");
            Bit((0xF7B * 8 + 7), "SEG31COM3");
            Bit((0xF82 * 8 + 1), "SEG32");
            Bit((0xFBF * 8 + 0), "SEG32COM0");
            Bit((0xF70 * 8 + 0), "SEG32COM1");
            Bit((0xF76 * 8 + 0), "SEG32COM2");
            Bit((0xF7C * 8 + 0), "SEG32COM3");
            Bit((0xFBF * 8 + 1), "SEG33COM0");
            Bit((0xFBF * 8 + 2), "SEG34COM0");
            Bit((0xFBF * 8 + 3), "SEG35COM0");
            Bit((0xFBF * 8 + 4), "SEG36COM0");
            Bit((0xFBF * 8 + 5), "SEG37COM0");
            Bit((0xFBF * 8 + 6), "SEG38COM0");
            Bit((0xFBF * 8 + 7), "SEG39COM0");
            Bit((0xFBB * 8 + 3), "SEG3COM0");
            Bit((0xF6C * 8 + 3), "SEG3COM1");
            Bit((0xF72 * 8 + 3), "SEG3COM2");
            Bit((0xF83 * 8 + 4), "SEG4");
            Bit((0xFBB * 8 + 4), "SEG4COM0");
            Bit((0xF6C * 8 + 4), "SEG4COM1");
            Bit((0xF72 * 8 + 4), "SEG4COM2");
            Bit((0xF83 * 8 + 5), "SEG5");
            Bit((0xFBB * 8 + 5), "SEG5COM0");
            Bit((0xF6C * 8 + 5), "SEG5COM1");
            Bit((0xF72 * 8 + 5), "SEG5COM2");
            Bit((0xF83 * 8 + 6), "SEG6");
            Bit((0xFBB * 8 + 6), "SEG6COM0");
            Bit((0xF6C * 8 + 6), "SEG6COM1");
            Bit((0xF72 * 8 + 6), "SEG6COM2");
            Bit((0xF83 * 8 + 7), "SEG7");
            Bit((0xFBB * 8 + 7), "SEG7COM0");
            Bit((0xF6C * 8 + 7), "SEG7COM1");
            Bit((0xF72 * 8 + 7), "SEG7COM2");
            Bit((0xF81 * 8 + 1), "SEG8");
            Bit((0xFBC * 8 + 0), "SEG8COM0");
            Bit((0xF6D * 8 + 0), "SEG8COM1");
            Bit((0xF73 * 8 + 0), "SEG8COM2");
            Bit((0xF79 * 8 + 0), "SEG8COM3");
            Bit((0xF81 * 8 + 2), "SEG9");
            Bit((0xFBC * 8 + 1), "SEG9COM0");
            Bit((0xF6D * 8 + 1), "SEG9COM1");
            Bit((0xF73 * 8 + 1), "SEG9COM2");
            Bit((0xF79 * 8 + 1), "SEG9COM3");
            Bit((0xFA9 * 8 + 0), "SEGEN0");
            Bit((0xFA9 * 8 + 1), "SEGEN1");
            Bit((0xFB6 * 8 + 2), "SEGEN10");
            Bit((0xFB6 * 8 + 3), "SEGEN11");
            Bit((0xFB6 * 8 + 4), "SEGEN12");
            Bit((0xFB6 * 8 + 5), "SEGEN13");
            Bit((0xFB6 * 8 + 6), "SEGEN14");
            Bit((0xFB6 * 8 + 7), "SEGEN15");
            Bit((0xFB7 * 8 + 0), "SEGEN16");
            Bit((0xFB7 * 8 + 1), "SEGEN17");
            Bit((0xFB7 * 8 + 2), "SEGEN18");
            Bit((0xFB7 * 8 + 3), "SEGEN19");
            Bit((0xFA9 * 8 + 2), "SEGEN2");
            Bit((0xFB7 * 8 + 4), "SEGEN20");
            Bit((0xFB7 * 8 + 5), "SEGEN21");
            Bit((0xFB7 * 8 + 6), "SEGEN22");
            Bit((0xFB7 * 8 + 7), "SEGEN23");
            Bit((0xFB8 * 8 + 0), "SEGEN24");
            Bit((0xFB8 * 8 + 1), "SEGEN25");
            Bit((0xFB8 * 8 + 2), "SEGEN26");
            Bit((0xFB8 * 8 + 3), "SEGEN27");
            Bit((0xFB8 * 8 + 4), "SEGEN28");
            Bit((0xFB8 * 8 + 5), "SEGEN29");
            Bit((0xFA9 * 8 + 3), "SEGEN3");
            Bit((0xFB8 * 8 + 6), "SEGEN30");
            Bit((0xFB8 * 8 + 7), "SEGEN31");
            Bit((0xFB9 * 8 + 0), "SEGEN32");
            Bit((0xFA9 * 8 + 4), "SEGEN4");
            Bit((0xFA9 * 8 + 5), "SEGEN5");
            Bit((0xFA9 * 8 + 6), "SEGEN6");
            Bit((0xFA9 * 8 + 7), "SEGEN7");
            Bit((0xFB6 * 8 + 0), "SEGEN8");
            Bit((0xFB6 * 8 + 1), "SEGEN9");
            Bit((0xFC5 * 8 + 0), "SEN");
            Bit((0xFC5 * 8 + 0), "SEN1");
            Bit((0xFAC * 8 + 3), "SENDB");
            Bit((0xFAC * 8 + 3), "SENDB1");
            Bit((0xF61 * 8 + 3), "SENDB2");
            Bit((0xFA8 * 8 + 6), "SLPEN");
            Bit((0xFC7 * 8 + 7), "SMP");
            Bit((0xFC7 * 8 + 7), "SMP1");
            Bit((0xFCD * 8 + 3), "SOSCEN");
            Bit((0xFB1 * 8 + 3), "SOSCEN3");
            Bit((0xFFC * 8 + 0), "SP0");
            Bit((0xFFC * 8 + 1), "SP1");
            Bit((0xFFC * 8 + 2), "SP2");
            Bit((0xFFC * 8 + 3), "SP3");
            Bit((0xFFC * 8 + 4), "SP4");
            Bit((0xFAB * 8 + 7), "SPEN");
            Bit((0xFAB * 8 + 7), "SPEN1");
            Bit((0xF60 * 8 + 7), "SPEN2");
            Bit((0xF98 * 8 + 7), "SPIOD");
            Bit((0xFAB * 8 + 5), "SREN");
            Bit((0xFAB * 8 + 5), "SREN1");
            Bit((0xF60 * 8 + 5), "SREN2");
            Bit((0xFAB * 8 + 5), "SRENA");
            Bit((0xF85 * 8 + 7), "SS1");
            Bit((0xF83 * 8 + 7), "SS2");
            Bit((0xF9D * 8 + 3), "SSP1IE");
            Bit((0xF9E * 8 + 3), "SSP1IF");
            Bit((0xF9F * 8 + 3), "SSP1IP");
            Bit((0xFC6 * 8 + 5), "SSPEN");
            Bit((0xFC6 * 8 + 5), "SSPEN1");
            Bit((0xF9D * 8 + 3), "SSPIE");
            Bit((0xF9E * 8 + 3), "SSPIF");
            Bit((0xF9F * 8 + 3), "SSPIP");
            Bit((0xFC6 * 8 + 0), "SSPM0");
            Bit((0xFC6 * 8 + 0), "SSPM01");
            Bit((0xF72 * 8 + 0), "SSPM012");
            Bit((0xFC6 * 8 + 1), "SSPM1");
            Bit((0xFC6 * 8 + 1), "SSPM11");
            Bit((0xF72 * 8 + 1), "SSPM112");
            Bit((0xFC6 * 8 + 2), "SSPM2");
            Bit((0xFC6 * 8 + 2), "SSPM21");
            Bit((0xF72 * 8 + 2), "SSPM212");
            Bit((0xFC6 * 8 + 3), "SSPM3");
            Bit((0xFC6 * 8 + 3), "SSPM31");
            Bit((0xF72 * 8 + 3), "SSPM312");
            Bit((0xFC6 * 8 + 6), "SSPOV");
            Bit((0xFC6 * 8 + 6), "SSPOV1");
            Bit((0xFC7 * 8 + 3), "START");
            Bit((0xFC7 * 8 + 3), "START1");
            Bit((0xFFC * 8 + 7), "STKFUL");
            Bit((0xFFC * 8 + 7), "STKOVF");
            Bit((0xFFC * 8 + 0), "STKPTR0");
            Bit((0xFFC * 8 + 1), "STKPTR1");
            Bit((0xFFC * 8 + 2), "STKPTR2");
            Bit((0xFFC * 8 + 3), "STKPTR3");
            Bit((0xFFC * 8 + 4), "STKPTR4");
            Bit((0xFFC * 8 + 6), "STKUNF");
            Bit((0xFC7 * 8 + 4), "STOP");
            Bit((0xFC7 * 8 + 4), "STOP1");
            Bit((0xFD1 * 8 + 0), "SWDTE");
            Bit((0xFD1 * 8 + 0), "SWDTEN");
            Bit((0xFAC * 8 + 4), "SYNC");
            Bit((0xFAC * 8 + 4), "SYNC1");
            Bit((0xF61 * 8 + 4), "SYNC2");
            Bit((0xFD5 * 8 + 6), "T08BIT");
            Bit((0xFD5 * 8 + 5), "T0CS");
            Bit((0xFF2 * 8 + 5), "T0IE");
            Bit((0xFF2 * 8 + 2), "T0IF");
            Bit((0xFF1 * 8 + 2), "T0IP");
            Bit((0xFD5 * 8 + 0), "T0PS0");
            Bit((0xFD5 * 8 + 1), "T0PS1");
            Bit((0xFD5 * 8 + 2), "T0PS2");
            Bit((0xFD5 * 8 + 4), "T0SE");
            Bit((0xF82 * 8 + 0), "T13CKI");
            Bit((0xFCD * 8 + 4), "T1CKPS0");
            Bit((0xFCD * 8 + 5), "T1CKPS1");
            Bit((0xFCD * 8 + 2), "T1INSYNC");
            Bit((0xFCD * 8 + 3), "T1OSCEN");
            Bit((0xF82 * 8 + 1), "T1OSI");
            Bit((0xF82 * 8 + 0), "T1OSO");
            Bit((0xFCD * 8 + 7), "T1RD16");
            Bit((0xFCD * 8 + 6), "T1RUN");
            Bit((0xFCD * 8 + 2), "T1SYNC");
            Bit((0xFCA * 8 + 0), "T2CKPS0");
            Bit((0xFCA * 8 + 1), "T2CKPS1");
            Bit((0xFCA * 8 + 3), "T2OUTPS0");
            Bit((0xFCA * 8 + 4), "T2OUTPS1");
            Bit((0xFCA * 8 + 5), "T2OUTPS2");
            Bit((0xFCA * 8 + 6), "T2OUTPS3");
            Bit((0xFB1 * 8 + 3), "T3CCP1");
            Bit((0xFB1 * 8 + 6), "T3CCP2");
            Bit((0xFB1 * 8 + 4), "T3CKPS0");
            Bit((0xF79 * 8 + 4), "T3CKPS019");
            Bit((0xFB1 * 8 + 5), "T3CKPS1");
            Bit((0xF79 * 8 + 5), "T3CKPS119");
            Bit((0xFB1 * 8 + 2), "T3INSYNC");
            Bit((0xFB1 * 8 + 7), "T3RD16");
            Bit((0xFB1 * 8 + 2), "T3SYNC");
            Bit((0xF76 * 8 + 0), "T4CKPS016");
            Bit((0xF76 * 8 + 1), "T4CKPS116");
            Bit((0xF76 * 8 + 3), "T4OUTPS016");
            Bit((0xF76 * 8 + 4), "T4OUTPS116");
            Bit((0xF76 * 8 + 5), "T4OUTPS216");
            Bit((0xF76 * 8 + 6), "T4OUTPS316");
            Bit((0xF57 * 8 + 4), "TGEN");
            Bit((0xFF2 * 8 + 5), "TMR0IE");
            Bit((0xFF2 * 8 + 2), "TMR0IF");
            Bit((0xFF1 * 8 + 2), "TMR0IP");
            Bit((0xFD5 * 8 + 7), "TMR0ON");
            Bit((0xFCD * 8 + 1), "TMR1CS");
            Bit((0xF9D * 8 + 0), "TMR1IE");
            Bit((0xF9E * 8 + 0), "TMR1IF");
            Bit((0xF9F * 8 + 0), "TMR1IP");
            Bit((0xFCD * 8 + 0), "TMR1ON");
            Bit((0xF9D * 8 + 1), "TMR2IE");
            Bit((0xF9E * 8 + 1), "TMR2IF");
            Bit((0xF9F * 8 + 1), "TMR2IP");
            Bit((0xFCA * 8 + 2), "TMR2ON");
            Bit((0xFB1 * 8 + 1), "TMR3CS");
            Bit((0xF79 * 8 + 6), "TMR3CS019");
            Bit((0xF79 * 8 + 7), "TMR3CS119");
            Bit((0xFA0 * 8 + 1), "TMR3IE");
            Bit((0xFA1 * 8 + 1), "TMR3IF");
            Bit((0xFA2 * 8 + 1), "TMR3IP");
            Bit((0xFB1 * 8 + 0), "TMR3ON");
            Bit((0xFD0 * 8 + 3), "TO");
            Bit((0xF80 * 8 + 4), "TOCKI");
            Bit((0xFC1 * 8 + 7), "TRIGSEL");
            Bit((0xF92 * 8 + 0), "TRISA0");
            Bit((0xF92 * 8 + 1), "TRISA1");
            Bit((0xF92 * 8 + 2), "TRISA2");
            Bit((0xF92 * 8 + 3), "TRISA3");
            Bit((0xF92 * 8 + 4), "TRISA4");
            Bit((0xF92 * 8 + 5), "TRISA5");
            Bit((0xF92 * 8 + 6), "TRISA6");
            Bit((0xF92 * 8 + 7), "TRISA7");
            Bit((0xF93 * 8 + 0), "TRISB0");
            Bit((0xF93 * 8 + 1), "TRISB1");
            Bit((0xF93 * 8 + 2), "TRISB2");
            Bit((0xF93 * 8 + 3), "TRISB3");
            Bit((0xF93 * 8 + 4), "TRISB4");
            Bit((0xF93 * 8 + 5), "TRISB5");
            Bit((0xF93 * 8 + 6), "TRISB6");
            Bit((0xF93 * 8 + 7), "TRISB7");
            Bit((0xF94 * 8 + 0), "TRISC0");
            Bit((0xF94 * 8 + 1), "TRISC1");
            Bit((0xF94 * 8 + 2), "TRISC2");
            Bit((0xF94 * 8 + 3), "TRISC3");
            Bit((0xF94 * 8 + 4), "TRISC4");
            Bit((0xF94 * 8 + 5), "TRISC5");
            Bit((0xF94 * 8 + 6), "TRISC6");
            Bit((0xF94 * 8 + 7), "TRISC7");
            Bit((0xF95 * 8 + 0), "TRISD0");
            Bit((0xF95 * 8 + 1), "TRISD1");
            Bit((0xF95 * 8 + 2), "TRISD2");
            Bit((0xF95 * 8 + 3), "TRISD3");
            Bit((0xF95 * 8 + 4), "TRISD4");
            Bit((0xF95 * 8 + 5), "TRISD5");
            Bit((0xF95 * 8 + 6), "TRISD6");
            Bit((0xF95 * 8 + 7), "TRISD7");
            Bit((0xF96 * 8 + 0), "TRISE0");
            Bit((0xF96 * 8 + 1), "TRISE1");
            Bit((0xF96 * 8 + 3), "TRISE3");
            Bit((0xF96 * 8 + 4), "TRISE4");
            Bit((0xF96 * 8 + 5), "TRISE5");
            Bit((0xF96 * 8 + 6), "TRISE6");
            Bit((0xF96 * 8 + 7), "TRISE7");
            Bit((0xF97 * 8 + 1), "TRISF1");
            Bit((0xF97 * 8 + 2), "TRISF2");
            Bit((0xF97 * 8 + 3), "TRISF3");
            Bit((0xF97 * 8 + 4), "TRISF4");
            Bit((0xF97 * 8 + 5), "TRISF5");
            Bit((0xF97 * 8 + 6), "TRISF6");
            Bit((0xF97 * 8 + 7), "TRISF7");
            Bit((0xF98 * 8 + 0), "TRISG0");
            Bit((0xF98 * 8 + 1), "TRISG1");
            Bit((0xF98 * 8 + 2), "TRISG2");
            Bit((0xF98 * 8 + 3), "TRISG3");
            Bit((0xF98 * 8 + 4), "TRISG4");
            Bit((0xFAC * 8 + 1), "TRMT");
            Bit((0xFAC * 8 + 1), "TRMT1");
            Bit((0xF61 * 8 + 1), "TRMT2");
            Bit((0xF9B * 8 + 0), "TUN0");
            Bit((0xF9B * 8 + 1), "TUN1");
            Bit((0xF9B * 8 + 2), "TUN2");
            Bit((0xF9B * 8 + 3), "TUN3");
            Bit((0xF9B * 8 + 4), "TUN4");
            Bit((0xF9B * 8 + 5), "TUN5");
            Bit((0xF82 * 8 + 6), "TX1");
            Bit((0xF9D * 8 + 4), "TX1IE");
            Bit((0xF9E * 8 + 4), "TX1IF");
            Bit((0xF9F * 8 + 4), "TX1IP");
            Bit((0xF86 * 8 + 1), "TX2");
            Bit((0xFA3 * 8 + 4), "TX2IE");
            Bit((0xFA4 * 8 + 4), "TX2IF");
            Bit((0xFA5 * 8 + 4), "TX2IP");
            Bit((0xFAC * 8 + 6), "TX8_9");
            Bit((0xF61 * 8 + 6), "TX8_92");
            Bit((0xFAC * 8 + 6), "TX9");
            Bit((0xFAC * 8 + 6), "TX91");
            Bit((0xF61 * 8 + 6), "TX92");
            Bit((0xFAC * 8 + 0), "TX9D");
            Bit((0xFAC * 8 + 0), "TX9D1");
            Bit((0xF61 * 8 + 0), "TX9D2");
            Bit((0xFA3 * 8 + 2), "TXB0IE");
            Bit((0xFA3 * 8 + 3), "TXB1IE");
            Bit((0xFA3 * 8 + 4), "TXB2IE");
            Bit((0xFA3 * 8 + 4), "TXBNIE");
            Bit((0xFA4 * 8 + 4), "TXBNIF");
            Bit((0xFA5 * 8 + 4), "TXBNIP");
            Bit((0xF7E * 8 + 4), "TXCKP");
            Bit((0xF7E * 8 + 4), "TXCKP1");
            Bit((0xFAC * 8 + 0), "TXD8");
            Bit((0xF61 * 8 + 0), "TXD82");
            Bit((0xFAC * 8 + 5), "TXEN");
            Bit((0xFAC * 8 + 5), "TXEN1");
            Bit((0xF61 * 8 + 5), "TXEN2");
            Bit((0xF9D * 8 + 4), "TXIE");
            Bit((0xF9E * 8 + 4), "TXIF");
            Bit((0xF9F * 8 + 4), "TXIP");
            Bit((0xF8F * 8 + 6), "U1OD");
            Bit((0xF8F * 8 + 7), "U2OD");
            Bit((0xFC7 * 8 + 1), "UA");
            Bit((0xFC7 * 8 + 1), "UA1");
            Bit((0xF80 * 8 + 0), "ULPWUIN");
            Bit((0xFC1 * 8 + 4), "VCFG0");
            Bit((0xFC1 * 8 + 4), "VCFG01");
            Bit((0xFC1 * 8 + 5), "VCFG1");
            Bit((0xFC1 * 8 + 5), "VCFG11");
            Bit((0xF86 * 8 + 2), "VLCAP1");
            Bit((0xF86 * 8 + 3), "VLCAP2");
            Bit((0xF80 * 8 + 2), "VREFM");
            Bit((0xF80 * 8 + 3), "VREFP");
            Bit((0xF7E * 8 + 1), "W4E");
            Bit((0xFAA * 8 + 4), "WA");
            Bit((0xFCB * 8 + 4), "WAIT0");
            Bit((0xFCB * 8 + 5), "WAIT1");
            Bit((0xF5D * 8 + 6), "WAITB0");
            Bit((0xF5D * 8 + 7), "WAITB1");
            Bit((0xF5D * 8 + 0), "WAITE0");
            Bit((0xF5D * 8 + 1), "WAITE1");
            Bit((0xF5D * 8 + 2), "WAITM0");
            Bit((0xF5D * 8 + 3), "WAITM1");
            Bit((0xF5D * 8 + 4), "WAITM2");
            Bit((0xF5D * 8 + 5), "WAITM3");
            Bit((0xFC6 * 8 + 7), "WCOL");
            Bit((0xFC6 * 8 + 7), "WCOL1");
            Bit((0xFA8 * 8 + 5), "WERR");
            Bit((0xFAA * 8 + 7), "WFT");
            Bit((0xFCB * 8 + 0), "WM0");
            Bit((0xFCB * 8 + 1), "WM1");
            Bit((0xFA6 * 8 + 5), "WPROG");
            Bit((0xFA6 * 8 + 1), "WR");
            Bit((0xF84 * 8 + 1), "WRE");
            Bit((0xFA6 * 8 + 2), "WREN");
            Bit((0xFA6 * 8 + 3), "WRERR");
            Bit((0xF7E * 8 + 1), "WUE");
            Bit((0xF7E * 8 + 1), "WUE1");
            Bit((0xFD8 * 8 + 2), "ZERO");
            Bit((0xFC7 * 8 + 5), "nA");
            Bit((0xFC7 * 8 + 5), "nADDRESS");
            Bit((0xFD0 * 8 + 0), "nBOR");
            Bit((0xFD0 * 8 + 5), "nCM");
            Bit((0xFC2 * 8 + 1), "nDONE");
            Bit((0xFD0 * 8 + 2), "nPD");
            Bit((0xFD0 * 8 + 1), "nPOR");
            Bit((0xFF1 * 8 + 7), "nRBPU");
            Bit((0xFAB * 8 + 6), "nRC8");
            Bit((0xFD0 * 8 + 4), "nRI");
            Bit((0xFCD * 8 + 2), "nT1SYNC");
            Bit((0xFB1 * 8 + 2), "nT3SYNC");
            Bit((0xFD0 * 8 + 3), "nTO");
            Bit((0xFAC * 8 + 6), "nTX8");
            Bit((0xFC7 * 8 + 2), "nW");
            Bit((0xFC7 * 8 + 2), "nWRITE");
        }

        public static string LookupBit(int bit)
        {
            if (bits.ContainsKey(bit))
                return bits[bit];
            return null;
        }

        public static string LookupSfr(int addr)
        {
            if (regs.ContainsKey(addr))
                return regs[addr];
            return null;
        }
    }
}
